// source: MessagingProtocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Messaging.Acknowledgement', null, global);
goog.exportSymbol('proto.Messaging.AliasMessage', null, global);
goog.exportSymbol('proto.Messaging.AndroidBeaconSettings', null, global);
goog.exportSymbol('proto.Messaging.AndroidGeoSettings', null, global);
goog.exportSymbol('proto.Messaging.AndroidGeoSettings.Priority', null, global);
goog.exportSymbol('proto.Messaging.AndroidInertialSettings', null, global);
goog.exportSymbol('proto.Messaging.AndroidInertialSettings.Frequency', null, global);
goog.exportSymbol('proto.Messaging.AndroidSettings', null, global);
goog.exportSymbol('proto.Messaging.AndroidWifiSettings', null, global);
goog.exportSymbol('proto.Messaging.Battery', null, global);
goog.exportSymbol('proto.Messaging.BeaconAdvertisement', null, global);
goog.exportSymbol('proto.Messaging.BeaconAdvertisement.Frequency', null, global);
goog.exportSymbol('proto.Messaging.BeaconAdvertisement.Power', null, global);
goog.exportSymbol('proto.Messaging.BeaconFilter', null, global);
goog.exportSymbol('proto.Messaging.BeaconMonitoring', null, global);
goog.exportSymbol('proto.Messaging.BeaconRanging', null, global);
goog.exportSymbol('proto.Messaging.BeaconRegion', null, global);
goog.exportSymbol('proto.Messaging.Bluetooth', null, global);
goog.exportSymbol('proto.Messaging.Capability', null, global);
goog.exportSymbol('proto.Messaging.CircularGeoFenceEvent', null, global);
goog.exportSymbol('proto.Messaging.CircularGeoFenceEvent.Type', null, global);
goog.exportSymbol('proto.Messaging.ClientLocationRequest', null, global);
goog.exportSymbol('proto.Messaging.ClientLocationRequest.Type', null, global);
goog.exportSymbol('proto.Messaging.ClientLocationResponse', null, global);
goog.exportSymbol('proto.Messaging.ClientMessage', null, global);
goog.exportSymbol('proto.Messaging.EID', null, global);
goog.exportSymbol('proto.Messaging.EddystoneBeacon', null, global);
goog.exportSymbol('proto.Messaging.GlobalSettings', null, global);
goog.exportSymbol('proto.Messaging.IBeacon', null, global);
goog.exportSymbol('proto.Messaging.IosBeaconSettings', null, global);
goog.exportSymbol('proto.Messaging.IosCapability', null, global);
goog.exportSymbol('proto.Messaging.IosCapability.BatteryState', null, global);
goog.exportSymbol('proto.Messaging.IosCapability.BluetoothHardware', null, global);
goog.exportSymbol('proto.Messaging.IosCapability.LocationAuthStatus', null, global);
goog.exportSymbol('proto.Messaging.IosCircularGeoFence', null, global);
goog.exportSymbol('proto.Messaging.IosGeoSettings', null, global);
goog.exportSymbol('proto.Messaging.IosInertialSettings', null, global);
goog.exportSymbol('proto.Messaging.IosSettings', null, global);
goog.exportSymbol('proto.Messaging.IosStandardGeoSettings', null, global);
goog.exportSymbol('proto.Messaging.IosStandardGeoSettings.Activity', null, global);
goog.exportSymbol('proto.Messaging.LocationMessage', null, global);
goog.exportSymbol('proto.Messaging.MarkerMessage', null, global);
goog.exportSymbol('proto.Messaging.ServerMessage', null, global);
goog.exportSymbol('proto.Messaging.ServerMessage.StopType', null, global);
goog.exportSymbol('proto.Messaging.Step', null, global);
goog.exportSymbol('proto.Messaging.UserInputLocationMessage', null, global);
goog.exportSymbol('proto.Messaging.WifiMessage', null, global);
goog.exportSymbol('proto.Messaging.WifiMessage.ChannelWidth', null, global);
goog.exportSymbol('proto.Messaging.WifiRTTMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.ServerMessage.repeatedFields_, null);
};
goog.inherits(proto.Messaging.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.ServerMessage.displayName = 'proto.Messaging.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IosSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.IosSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IosSettings.displayName = 'proto.Messaging.IosSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IosBeaconSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.IosBeaconSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IosBeaconSettings.displayName = 'proto.Messaging.IosBeaconSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IosStandardGeoSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.IosStandardGeoSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IosStandardGeoSettings.displayName = 'proto.Messaging.IosStandardGeoSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IosGeoSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.IosGeoSettings.repeatedFields_, null);
};
goog.inherits(proto.Messaging.IosGeoSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IosGeoSettings.displayName = 'proto.Messaging.IosGeoSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IosCircularGeoFence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.IosCircularGeoFence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IosCircularGeoFence.displayName = 'proto.Messaging.IosCircularGeoFence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IosInertialSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.IosInertialSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IosInertialSettings.displayName = 'proto.Messaging.IosInertialSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.AndroidSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.AndroidSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.AndroidSettings.displayName = 'proto.Messaging.AndroidSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.AndroidGeoSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.AndroidGeoSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.AndroidGeoSettings.displayName = 'proto.Messaging.AndroidGeoSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.AndroidBeaconSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.AndroidBeaconSettings.repeatedFields_, null);
};
goog.inherits(proto.Messaging.AndroidBeaconSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.AndroidBeaconSettings.displayName = 'proto.Messaging.AndroidBeaconSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.AndroidWifiSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.AndroidWifiSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.AndroidWifiSettings.displayName = 'proto.Messaging.AndroidWifiSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.BeaconRegion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.BeaconRegion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.BeaconRegion.displayName = 'proto.Messaging.BeaconRegion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.BeaconAdvertisement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.BeaconAdvertisement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.BeaconAdvertisement.displayName = 'proto.Messaging.BeaconAdvertisement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.EID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.EID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.EID.displayName = 'proto.Messaging.EID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.BeaconMonitoring = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.BeaconMonitoring.repeatedFields_, null);
};
goog.inherits(proto.Messaging.BeaconMonitoring, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.BeaconMonitoring.displayName = 'proto.Messaging.BeaconMonitoring';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.BeaconRanging = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.BeaconRanging.repeatedFields_, null);
};
goog.inherits(proto.Messaging.BeaconRanging, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.BeaconRanging.displayName = 'proto.Messaging.BeaconRanging';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.BeaconFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.BeaconFilter.repeatedFields_, null);
};
goog.inherits(proto.Messaging.BeaconFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.BeaconFilter.displayName = 'proto.Messaging.BeaconFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.AndroidInertialSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.AndroidInertialSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.AndroidInertialSettings.displayName = 'proto.Messaging.AndroidInertialSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.GlobalSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.GlobalSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.GlobalSettings.displayName = 'proto.Messaging.GlobalSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.ClientLocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.ClientLocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.ClientLocationRequest.displayName = 'proto.Messaging.ClientLocationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.ClientLocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.ClientLocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.ClientLocationResponse.displayName = 'proto.Messaging.ClientLocationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.ClientMessage.repeatedFields_, null);
};
goog.inherits(proto.Messaging.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.ClientMessage.displayName = 'proto.Messaging.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.CircularGeoFenceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.CircularGeoFenceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.CircularGeoFenceEvent.displayName = 'proto.Messaging.CircularGeoFenceEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.UserInputLocationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.UserInputLocationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.UserInputLocationMessage.displayName = 'proto.Messaging.UserInputLocationMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.LocationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.LocationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.LocationMessage.displayName = 'proto.Messaging.LocationMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.Bluetooth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messaging.Bluetooth.repeatedFields_, null);
};
goog.inherits(proto.Messaging.Bluetooth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.Bluetooth.displayName = 'proto.Messaging.Bluetooth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IBeacon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.IBeacon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IBeacon.displayName = 'proto.Messaging.IBeacon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.EddystoneBeacon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.EddystoneBeacon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.EddystoneBeacon.displayName = 'proto.Messaging.EddystoneBeacon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.WifiMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.WifiMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.WifiMessage.displayName = 'proto.Messaging.WifiMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.WifiRTTMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.WifiRTTMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.WifiRTTMessage.displayName = 'proto.Messaging.WifiRTTMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.MarkerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.MarkerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.MarkerMessage.displayName = 'proto.Messaging.MarkerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.Capability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.Capability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.Capability.displayName = 'proto.Messaging.Capability';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.IosCapability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.IosCapability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.IosCapability.displayName = 'proto.Messaging.IosCapability';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.AliasMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.AliasMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.AliasMessage.displayName = 'proto.Messaging.AliasMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.Battery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.Battery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.Battery.displayName = 'proto.Messaging.Battery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.Acknowledgement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.Acknowledgement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.Acknowledgement.displayName = 'proto.Messaging.Acknowledgement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messaging.Step = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messaging.Step, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messaging.Step.displayName = 'proto.Messaging.Step';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.ServerMessage.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    globalsettings: (f = msg.getGlobalsettings()) && proto.Messaging.GlobalSettings.toObject(includeInstance, f),
    iossettings: (f = msg.getIossettings()) && proto.Messaging.IosSettings.toObject(includeInstance, f),
    androidsettings: (f = msg.getAndroidsettings()) && proto.Messaging.AndroidSettings.toObject(includeInstance, f),
    clientkey: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    deviceid: msg.getDeviceid_asB64(),
    senttimestamp: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    messageidentifier: msg.getMessageidentifier_asB64(),
    stop: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    locationresponsesList: jspb.Message.toObjectList(msg.getLocationresponsesList(),
    proto.Messaging.ClientLocationResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.ServerMessage}
 */
proto.Messaging.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.ServerMessage;
  return proto.Messaging.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.ServerMessage}
 */
proto.Messaging.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.GlobalSettings;
      reader.readMessage(value,proto.Messaging.GlobalSettings.deserializeBinaryFromReader);
      msg.setGlobalsettings(value);
      break;
    case 2:
      var value = new proto.Messaging.IosSettings;
      reader.readMessage(value,proto.Messaging.IosSettings.deserializeBinaryFromReader);
      msg.setIossettings(value);
      break;
    case 3:
      var value = new proto.Messaging.AndroidSettings;
      reader.readMessage(value,proto.Messaging.AndroidSettings.deserializeBinaryFromReader);
      msg.setAndroidsettings(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientkey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeviceid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSenttimestamp(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageidentifier(value);
      break;
    case 8:
      var value = /** @type {!proto.Messaging.ServerMessage.StopType} */ (reader.readEnum());
      msg.setStop(value);
      break;
    case 9:
      var value = new proto.Messaging.ClientLocationResponse;
      reader.readMessage(value,proto.Messaging.ClientLocationResponse.deserializeBinaryFromReader);
      msg.addLocationresponses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlobalsettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Messaging.GlobalSettings.serializeBinaryToWriter
    );
  }
  f = message.getIossettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Messaging.IosSettings.serializeBinaryToWriter
    );
  }
  f = message.getAndroidsettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Messaging.AndroidSettings.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {!proto.Messaging.ServerMessage.StopType} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getLocationresponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.Messaging.ClientLocationResponse.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.ServerMessage.StopType = {
  STOP: 1,
  TERMINATE: 2
};

/**
 * optional GlobalSettings globalSettings = 1;
 * @return {?proto.Messaging.GlobalSettings}
 */
proto.Messaging.ServerMessage.prototype.getGlobalsettings = function() {
  return /** @type{?proto.Messaging.GlobalSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.GlobalSettings, 1));
};


/**
 * @param {?proto.Messaging.GlobalSettings|undefined} value
 * @return {!proto.Messaging.ServerMessage} returns this
*/
proto.Messaging.ServerMessage.prototype.setGlobalsettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearGlobalsettings = function() {
  return this.setGlobalsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasGlobalsettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IosSettings iosSettings = 2;
 * @return {?proto.Messaging.IosSettings}
 */
proto.Messaging.ServerMessage.prototype.getIossettings = function() {
  return /** @type{?proto.Messaging.IosSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.IosSettings, 2));
};


/**
 * @param {?proto.Messaging.IosSettings|undefined} value
 * @return {!proto.Messaging.ServerMessage} returns this
*/
proto.Messaging.ServerMessage.prototype.setIossettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearIossettings = function() {
  return this.setIossettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasIossettings = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AndroidSettings androidSettings = 3;
 * @return {?proto.Messaging.AndroidSettings}
 */
proto.Messaging.ServerMessage.prototype.getAndroidsettings = function() {
  return /** @type{?proto.Messaging.AndroidSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.AndroidSettings, 3));
};


/**
 * @param {?proto.Messaging.AndroidSettings|undefined} value
 * @return {!proto.Messaging.ServerMessage} returns this
*/
proto.Messaging.ServerMessage.prototype.setAndroidsettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearAndroidsettings = function() {
  return this.setAndroidsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasAndroidsettings = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string clientKey = 4;
 * @return {string}
 */
proto.Messaging.ServerMessage.prototype.getClientkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.setClientkey = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearClientkey = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasClientkey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes deviceId = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.ServerMessage.prototype.getDeviceid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes deviceId = 5;
 * This is a type-conversion wrapper around `getDeviceid()`
 * @return {string}
 */
proto.Messaging.ServerMessage.prototype.getDeviceid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeviceid()));
};


/**
 * optional bytes deviceId = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeviceid()`
 * @return {!Uint8Array}
 */
proto.Messaging.ServerMessage.prototype.getDeviceid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeviceid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 sentTimestamp = 6;
 * @return {number}
 */
proto.Messaging.ServerMessage.prototype.getSenttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.setSenttimestamp = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearSenttimestamp = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasSenttimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes messageIdentifier = 7;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.ServerMessage.prototype.getMessageidentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes messageIdentifier = 7;
 * This is a type-conversion wrapper around `getMessageidentifier()`
 * @return {string}
 */
proto.Messaging.ServerMessage.prototype.getMessageidentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageidentifier()));
};


/**
 * optional bytes messageIdentifier = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageidentifier()`
 * @return {!Uint8Array}
 */
proto.Messaging.ServerMessage.prototype.getMessageidentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageidentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.setMessageidentifier = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearMessageidentifier = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasMessageidentifier = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional StopType stop = 8;
 * @return {!proto.Messaging.ServerMessage.StopType}
 */
proto.Messaging.ServerMessage.prototype.getStop = function() {
  return /** @type {!proto.Messaging.ServerMessage.StopType} */ (jspb.Message.getFieldWithDefault(this, 8, 1));
};


/**
 * @param {!proto.Messaging.ServerMessage.StopType} value
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.setStop = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearStop = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ServerMessage.prototype.hasStop = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated ClientLocationResponse locationResponses = 9;
 * @return {!Array<!proto.Messaging.ClientLocationResponse>}
 */
proto.Messaging.ServerMessage.prototype.getLocationresponsesList = function() {
  return /** @type{!Array<!proto.Messaging.ClientLocationResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.ClientLocationResponse, 9));
};


/**
 * @param {!Array<!proto.Messaging.ClientLocationResponse>} value
 * @return {!proto.Messaging.ServerMessage} returns this
*/
proto.Messaging.ServerMessage.prototype.setLocationresponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.Messaging.ClientLocationResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.ClientLocationResponse}
 */
proto.Messaging.ServerMessage.prototype.addLocationresponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.Messaging.ClientLocationResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ServerMessage} returns this
 */
proto.Messaging.ServerMessage.prototype.clearLocationresponsesList = function() {
  return this.setLocationresponsesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IosSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IosSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IosSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    geosettings: (f = msg.getGeosettings()) && proto.Messaging.IosGeoSettings.toObject(includeInstance, f),
    beaconsettings: (f = msg.getBeaconsettings()) && proto.Messaging.IosBeaconSettings.toObject(includeInstance, f),
    backgroundextension: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    inertialsettings: (f = msg.getInertialsettings()) && proto.Messaging.IosInertialSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IosSettings}
 */
proto.Messaging.IosSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IosSettings;
  return proto.Messaging.IosSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IosSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IosSettings}
 */
proto.Messaging.IosSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.IosGeoSettings;
      reader.readMessage(value,proto.Messaging.IosGeoSettings.deserializeBinaryFromReader);
      msg.setGeosettings(value);
      break;
    case 2:
      var value = new proto.Messaging.IosBeaconSettings;
      reader.readMessage(value,proto.Messaging.IosBeaconSettings.deserializeBinaryFromReader);
      msg.setBeaconsettings(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBackgroundextension(value);
      break;
    case 4:
      var value = new proto.Messaging.IosInertialSettings;
      reader.readMessage(value,proto.Messaging.IosInertialSettings.deserializeBinaryFromReader);
      msg.setInertialsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IosSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IosSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IosSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeosettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Messaging.IosGeoSettings.serializeBinaryToWriter
    );
  }
  f = message.getBeaconsettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Messaging.IosBeaconSettings.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getInertialsettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Messaging.IosInertialSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional IosGeoSettings geoSettings = 1;
 * @return {?proto.Messaging.IosGeoSettings}
 */
proto.Messaging.IosSettings.prototype.getGeosettings = function() {
  return /** @type{?proto.Messaging.IosGeoSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.IosGeoSettings, 1));
};


/**
 * @param {?proto.Messaging.IosGeoSettings|undefined} value
 * @return {!proto.Messaging.IosSettings} returns this
*/
proto.Messaging.IosSettings.prototype.setGeosettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosSettings} returns this
 */
proto.Messaging.IosSettings.prototype.clearGeosettings = function() {
  return this.setGeosettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosSettings.prototype.hasGeosettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IosBeaconSettings beaconSettings = 2;
 * @return {?proto.Messaging.IosBeaconSettings}
 */
proto.Messaging.IosSettings.prototype.getBeaconsettings = function() {
  return /** @type{?proto.Messaging.IosBeaconSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.IosBeaconSettings, 2));
};


/**
 * @param {?proto.Messaging.IosBeaconSettings|undefined} value
 * @return {!proto.Messaging.IosSettings} returns this
*/
proto.Messaging.IosSettings.prototype.setBeaconsettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosSettings} returns this
 */
proto.Messaging.IosSettings.prototype.clearBeaconsettings = function() {
  return this.setBeaconsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosSettings.prototype.hasBeaconsettings = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 backgroundExtension = 3;
 * @return {number}
 */
proto.Messaging.IosSettings.prototype.getBackgroundextension = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosSettings} returns this
 */
proto.Messaging.IosSettings.prototype.setBackgroundextension = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosSettings} returns this
 */
proto.Messaging.IosSettings.prototype.clearBackgroundextension = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosSettings.prototype.hasBackgroundextension = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IosInertialSettings inertialSettings = 4;
 * @return {?proto.Messaging.IosInertialSettings}
 */
proto.Messaging.IosSettings.prototype.getInertialsettings = function() {
  return /** @type{?proto.Messaging.IosInertialSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.IosInertialSettings, 4));
};


/**
 * @param {?proto.Messaging.IosInertialSettings|undefined} value
 * @return {!proto.Messaging.IosSettings} returns this
*/
proto.Messaging.IosSettings.prototype.setInertialsettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosSettings} returns this
 */
proto.Messaging.IosSettings.prototype.clearInertialsettings = function() {
  return this.setInertialsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosSettings.prototype.hasInertialsettings = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IosBeaconSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IosBeaconSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IosBeaconSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosBeaconSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitoring: (f = msg.getMonitoring()) && proto.Messaging.BeaconMonitoring.toObject(includeInstance, f),
    foregroundranging: (f = msg.getForegroundranging()) && proto.Messaging.BeaconRanging.toObject(includeInstance, f),
    backgroundranging: (f = msg.getBackgroundranging()) && proto.Messaging.BeaconRanging.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IosBeaconSettings}
 */
proto.Messaging.IosBeaconSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IosBeaconSettings;
  return proto.Messaging.IosBeaconSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IosBeaconSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IosBeaconSettings}
 */
proto.Messaging.IosBeaconSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.BeaconMonitoring;
      reader.readMessage(value,proto.Messaging.BeaconMonitoring.deserializeBinaryFromReader);
      msg.setMonitoring(value);
      break;
    case 2:
      var value = new proto.Messaging.BeaconRanging;
      reader.readMessage(value,proto.Messaging.BeaconRanging.deserializeBinaryFromReader);
      msg.setForegroundranging(value);
      break;
    case 3:
      var value = new proto.Messaging.BeaconRanging;
      reader.readMessage(value,proto.Messaging.BeaconRanging.deserializeBinaryFromReader);
      msg.setBackgroundranging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IosBeaconSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IosBeaconSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IosBeaconSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosBeaconSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitoring();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Messaging.BeaconMonitoring.serializeBinaryToWriter
    );
  }
  f = message.getForegroundranging();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Messaging.BeaconRanging.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundranging();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Messaging.BeaconRanging.serializeBinaryToWriter
    );
  }
};


/**
 * optional BeaconMonitoring monitoring = 1;
 * @return {?proto.Messaging.BeaconMonitoring}
 */
proto.Messaging.IosBeaconSettings.prototype.getMonitoring = function() {
  return /** @type{?proto.Messaging.BeaconMonitoring} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.BeaconMonitoring, 1));
};


/**
 * @param {?proto.Messaging.BeaconMonitoring|undefined} value
 * @return {!proto.Messaging.IosBeaconSettings} returns this
*/
proto.Messaging.IosBeaconSettings.prototype.setMonitoring = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosBeaconSettings} returns this
 */
proto.Messaging.IosBeaconSettings.prototype.clearMonitoring = function() {
  return this.setMonitoring(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosBeaconSettings.prototype.hasMonitoring = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BeaconRanging foregroundRanging = 2;
 * @return {?proto.Messaging.BeaconRanging}
 */
proto.Messaging.IosBeaconSettings.prototype.getForegroundranging = function() {
  return /** @type{?proto.Messaging.BeaconRanging} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.BeaconRanging, 2));
};


/**
 * @param {?proto.Messaging.BeaconRanging|undefined} value
 * @return {!proto.Messaging.IosBeaconSettings} returns this
*/
proto.Messaging.IosBeaconSettings.prototype.setForegroundranging = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosBeaconSettings} returns this
 */
proto.Messaging.IosBeaconSettings.prototype.clearForegroundranging = function() {
  return this.setForegroundranging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosBeaconSettings.prototype.hasForegroundranging = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BeaconRanging backgroundRanging = 3;
 * @return {?proto.Messaging.BeaconRanging}
 */
proto.Messaging.IosBeaconSettings.prototype.getBackgroundranging = function() {
  return /** @type{?proto.Messaging.BeaconRanging} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.BeaconRanging, 3));
};


/**
 * @param {?proto.Messaging.BeaconRanging|undefined} value
 * @return {!proto.Messaging.IosBeaconSettings} returns this
*/
proto.Messaging.IosBeaconSettings.prototype.setBackgroundranging = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosBeaconSettings} returns this
 */
proto.Messaging.IosBeaconSettings.prototype.clearBackgroundranging = function() {
  return this.setBackgroundranging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosBeaconSettings.prototype.hasBackgroundranging = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IosStandardGeoSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IosStandardGeoSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IosStandardGeoSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosStandardGeoSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxruntime: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    minofftime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    desiredaccuracy: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    distancefilter: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    pausesupdates: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    activitytype: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IosStandardGeoSettings}
 */
proto.Messaging.IosStandardGeoSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IosStandardGeoSettings;
  return proto.Messaging.IosStandardGeoSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IosStandardGeoSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IosStandardGeoSettings}
 */
proto.Messaging.IosStandardGeoSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxruntime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinofftime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDesiredaccuracy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDistancefilter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPausesupdates(value);
      break;
    case 6:
      var value = /** @type {!proto.Messaging.IosStandardGeoSettings.Activity} */ (reader.readEnum());
      msg.setActivitytype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IosStandardGeoSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IosStandardGeoSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IosStandardGeoSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosStandardGeoSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {!proto.Messaging.IosStandardGeoSettings.Activity} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.IosStandardGeoSettings.Activity = {
  OTHER: 0,
  AUTO: 1,
  FITNESS: 2,
  NAVIGATION: 3
};

/**
 * optional uint64 maxRunTime = 1;
 * @return {number}
 */
proto.Messaging.IosStandardGeoSettings.prototype.getMaxruntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.setMaxruntime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.clearMaxruntime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosStandardGeoSettings.prototype.hasMaxruntime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 minOffTime = 2;
 * @return {number}
 */
proto.Messaging.IosStandardGeoSettings.prototype.getMinofftime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.setMinofftime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.clearMinofftime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosStandardGeoSettings.prototype.hasMinofftime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 desiredAccuracy = 3;
 * @return {number}
 */
proto.Messaging.IosStandardGeoSettings.prototype.getDesiredaccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.setDesiredaccuracy = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.clearDesiredaccuracy = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosStandardGeoSettings.prototype.hasDesiredaccuracy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 distanceFilter = 4;
 * @return {number}
 */
proto.Messaging.IosStandardGeoSettings.prototype.getDistancefilter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.setDistancefilter = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.clearDistancefilter = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosStandardGeoSettings.prototype.hasDistancefilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool pausesUpdates = 5;
 * @return {boolean}
 */
proto.Messaging.IosStandardGeoSettings.prototype.getPausesupdates = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.setPausesupdates = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.clearPausesupdates = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosStandardGeoSettings.prototype.hasPausesupdates = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Activity activityType = 6;
 * @return {!proto.Messaging.IosStandardGeoSettings.Activity}
 */
proto.Messaging.IosStandardGeoSettings.prototype.getActivitytype = function() {
  return /** @type {!proto.Messaging.IosStandardGeoSettings.Activity} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.Messaging.IosStandardGeoSettings.Activity} value
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.setActivitytype = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosStandardGeoSettings} returns this
 */
proto.Messaging.IosStandardGeoSettings.prototype.clearActivitytype = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosStandardGeoSettings.prototype.hasActivitytype = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.IosGeoSettings.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IosGeoSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IosGeoSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IosGeoSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosGeoSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    significantupates: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    foregroundgeo: (f = msg.getForegroundgeo()) && proto.Messaging.IosStandardGeoSettings.toObject(includeInstance, f),
    backgroundgeo: (f = msg.getBackgroundgeo()) && proto.Messaging.IosStandardGeoSettings.toObject(includeInstance, f),
    ioscirculargeofencesList: jspb.Message.toObjectList(msg.getIoscirculargeofencesList(),
    proto.Messaging.IosCircularGeoFence.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IosGeoSettings}
 */
proto.Messaging.IosGeoSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IosGeoSettings;
  return proto.Messaging.IosGeoSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IosGeoSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IosGeoSettings}
 */
proto.Messaging.IosGeoSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignificantupates(value);
      break;
    case 2:
      var value = new proto.Messaging.IosStandardGeoSettings;
      reader.readMessage(value,proto.Messaging.IosStandardGeoSettings.deserializeBinaryFromReader);
      msg.setForegroundgeo(value);
      break;
    case 3:
      var value = new proto.Messaging.IosStandardGeoSettings;
      reader.readMessage(value,proto.Messaging.IosStandardGeoSettings.deserializeBinaryFromReader);
      msg.setBackgroundgeo(value);
      break;
    case 4:
      var value = new proto.Messaging.IosCircularGeoFence;
      reader.readMessage(value,proto.Messaging.IosCircularGeoFence.deserializeBinaryFromReader);
      msg.addIoscirculargeofences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IosGeoSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IosGeoSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IosGeoSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosGeoSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getForegroundgeo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Messaging.IosStandardGeoSettings.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundgeo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Messaging.IosStandardGeoSettings.serializeBinaryToWriter
    );
  }
  f = message.getIoscirculargeofencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Messaging.IosCircularGeoFence.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool significantUpates = 1;
 * @return {boolean}
 */
proto.Messaging.IosGeoSettings.prototype.getSignificantupates = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.IosGeoSettings} returns this
 */
proto.Messaging.IosGeoSettings.prototype.setSignificantupates = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosGeoSettings} returns this
 */
proto.Messaging.IosGeoSettings.prototype.clearSignificantupates = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosGeoSettings.prototype.hasSignificantupates = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IosStandardGeoSettings foregroundGeo = 2;
 * @return {?proto.Messaging.IosStandardGeoSettings}
 */
proto.Messaging.IosGeoSettings.prototype.getForegroundgeo = function() {
  return /** @type{?proto.Messaging.IosStandardGeoSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.IosStandardGeoSettings, 2));
};


/**
 * @param {?proto.Messaging.IosStandardGeoSettings|undefined} value
 * @return {!proto.Messaging.IosGeoSettings} returns this
*/
proto.Messaging.IosGeoSettings.prototype.setForegroundgeo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosGeoSettings} returns this
 */
proto.Messaging.IosGeoSettings.prototype.clearForegroundgeo = function() {
  return this.setForegroundgeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosGeoSettings.prototype.hasForegroundgeo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IosStandardGeoSettings backgroundGeo = 3;
 * @return {?proto.Messaging.IosStandardGeoSettings}
 */
proto.Messaging.IosGeoSettings.prototype.getBackgroundgeo = function() {
  return /** @type{?proto.Messaging.IosStandardGeoSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.IosStandardGeoSettings, 3));
};


/**
 * @param {?proto.Messaging.IosStandardGeoSettings|undefined} value
 * @return {!proto.Messaging.IosGeoSettings} returns this
*/
proto.Messaging.IosGeoSettings.prototype.setBackgroundgeo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.IosGeoSettings} returns this
 */
proto.Messaging.IosGeoSettings.prototype.clearBackgroundgeo = function() {
  return this.setBackgroundgeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosGeoSettings.prototype.hasBackgroundgeo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated IosCircularGeoFence iosCircularGeoFences = 4;
 * @return {!Array<!proto.Messaging.IosCircularGeoFence>}
 */
proto.Messaging.IosGeoSettings.prototype.getIoscirculargeofencesList = function() {
  return /** @type{!Array<!proto.Messaging.IosCircularGeoFence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.IosCircularGeoFence, 4));
};


/**
 * @param {!Array<!proto.Messaging.IosCircularGeoFence>} value
 * @return {!proto.Messaging.IosGeoSettings} returns this
*/
proto.Messaging.IosGeoSettings.prototype.setIoscirculargeofencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Messaging.IosCircularGeoFence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.IosCircularGeoFence}
 */
proto.Messaging.IosGeoSettings.prototype.addIoscirculargeofences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Messaging.IosCircularGeoFence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.IosGeoSettings} returns this
 */
proto.Messaging.IosGeoSettings.prototype.clearIoscirculargeofencesList = function() {
  return this.setIoscirculargeofencesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IosCircularGeoFence.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IosCircularGeoFence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IosCircularGeoFence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosCircularGeoFence.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    radius: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IosCircularGeoFence}
 */
proto.Messaging.IosCircularGeoFence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IosCircularGeoFence;
  return proto.Messaging.IosCircularGeoFence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IosCircularGeoFence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IosCircularGeoFence}
 */
proto.Messaging.IosCircularGeoFence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IosCircularGeoFence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IosCircularGeoFence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IosCircularGeoFence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosCircularGeoFence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.Messaging.IosCircularGeoFence.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosCircularGeoFence} returns this
 */
proto.Messaging.IosCircularGeoFence.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCircularGeoFence} returns this
 */
proto.Messaging.IosCircularGeoFence.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCircularGeoFence.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.Messaging.IosCircularGeoFence.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosCircularGeoFence} returns this
 */
proto.Messaging.IosCircularGeoFence.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCircularGeoFence} returns this
 */
proto.Messaging.IosCircularGeoFence.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCircularGeoFence.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double radius = 3;
 * @return {number}
 */
proto.Messaging.IosCircularGeoFence.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosCircularGeoFence} returns this
 */
proto.Messaging.IosCircularGeoFence.prototype.setRadius = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCircularGeoFence} returns this
 */
proto.Messaging.IosCircularGeoFence.prototype.clearRadius = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCircularGeoFence.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IosInertialSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IosInertialSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IosInertialSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosInertialSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    interval: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IosInertialSettings}
 */
proto.Messaging.IosInertialSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IosInertialSettings;
  return proto.Messaging.IosInertialSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IosInertialSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IosInertialSettings}
 */
proto.Messaging.IosInertialSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IosInertialSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IosInertialSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IosInertialSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosInertialSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.Messaging.IosInertialSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.IosInertialSettings} returns this
 */
proto.Messaging.IosInertialSettings.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosInertialSettings} returns this
 */
proto.Messaging.IosInertialSettings.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosInertialSettings.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 interval = 2;
 * @return {number}
 */
proto.Messaging.IosInertialSettings.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IosInertialSettings} returns this
 */
proto.Messaging.IosInertialSettings.prototype.setInterval = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosInertialSettings} returns this
 */
proto.Messaging.IosInertialSettings.prototype.clearInterval = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosInertialSettings.prototype.hasInterval = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.AndroidSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.AndroidSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.AndroidSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    geosettings: (f = msg.getGeosettings()) && proto.Messaging.AndroidGeoSettings.toObject(includeInstance, f),
    beaconsettings: (f = msg.getBeaconsettings()) && proto.Messaging.AndroidBeaconSettings.toObject(includeInstance, f),
    wifisettings: (f = msg.getWifisettings()) && proto.Messaging.AndroidWifiSettings.toObject(includeInstance, f),
    foregroundservice: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    inertialsettings: (f = msg.getInertialsettings()) && proto.Messaging.AndroidInertialSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.AndroidSettings}
 */
proto.Messaging.AndroidSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.AndroidSettings;
  return proto.Messaging.AndroidSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.AndroidSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.AndroidSettings}
 */
proto.Messaging.AndroidSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.AndroidGeoSettings;
      reader.readMessage(value,proto.Messaging.AndroidGeoSettings.deserializeBinaryFromReader);
      msg.setGeosettings(value);
      break;
    case 2:
      var value = new proto.Messaging.AndroidBeaconSettings;
      reader.readMessage(value,proto.Messaging.AndroidBeaconSettings.deserializeBinaryFromReader);
      msg.setBeaconsettings(value);
      break;
    case 3:
      var value = new proto.Messaging.AndroidWifiSettings;
      reader.readMessage(value,proto.Messaging.AndroidWifiSettings.deserializeBinaryFromReader);
      msg.setWifisettings(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForegroundservice(value);
      break;
    case 5:
      var value = new proto.Messaging.AndroidInertialSettings;
      reader.readMessage(value,proto.Messaging.AndroidInertialSettings.deserializeBinaryFromReader);
      msg.setInertialsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.AndroidSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.AndroidSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.AndroidSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeosettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Messaging.AndroidGeoSettings.serializeBinaryToWriter
    );
  }
  f = message.getBeaconsettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Messaging.AndroidBeaconSettings.serializeBinaryToWriter
    );
  }
  f = message.getWifisettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Messaging.AndroidWifiSettings.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getInertialsettings();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Messaging.AndroidInertialSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional AndroidGeoSettings geoSettings = 1;
 * @return {?proto.Messaging.AndroidGeoSettings}
 */
proto.Messaging.AndroidSettings.prototype.getGeosettings = function() {
  return /** @type{?proto.Messaging.AndroidGeoSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.AndroidGeoSettings, 1));
};


/**
 * @param {?proto.Messaging.AndroidGeoSettings|undefined} value
 * @return {!proto.Messaging.AndroidSettings} returns this
*/
proto.Messaging.AndroidSettings.prototype.setGeosettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.AndroidSettings} returns this
 */
proto.Messaging.AndroidSettings.prototype.clearGeosettings = function() {
  return this.setGeosettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidSettings.prototype.hasGeosettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AndroidBeaconSettings beaconSettings = 2;
 * @return {?proto.Messaging.AndroidBeaconSettings}
 */
proto.Messaging.AndroidSettings.prototype.getBeaconsettings = function() {
  return /** @type{?proto.Messaging.AndroidBeaconSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.AndroidBeaconSettings, 2));
};


/**
 * @param {?proto.Messaging.AndroidBeaconSettings|undefined} value
 * @return {!proto.Messaging.AndroidSettings} returns this
*/
proto.Messaging.AndroidSettings.prototype.setBeaconsettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.AndroidSettings} returns this
 */
proto.Messaging.AndroidSettings.prototype.clearBeaconsettings = function() {
  return this.setBeaconsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidSettings.prototype.hasBeaconsettings = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AndroidWifiSettings wifiSettings = 3;
 * @return {?proto.Messaging.AndroidWifiSettings}
 */
proto.Messaging.AndroidSettings.prototype.getWifisettings = function() {
  return /** @type{?proto.Messaging.AndroidWifiSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.AndroidWifiSettings, 3));
};


/**
 * @param {?proto.Messaging.AndroidWifiSettings|undefined} value
 * @return {!proto.Messaging.AndroidSettings} returns this
*/
proto.Messaging.AndroidSettings.prototype.setWifisettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.AndroidSettings} returns this
 */
proto.Messaging.AndroidSettings.prototype.clearWifisettings = function() {
  return this.setWifisettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidSettings.prototype.hasWifisettings = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool foregroundService = 4;
 * @return {boolean}
 */
proto.Messaging.AndroidSettings.prototype.getForegroundservice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.AndroidSettings} returns this
 */
proto.Messaging.AndroidSettings.prototype.setForegroundservice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidSettings} returns this
 */
proto.Messaging.AndroidSettings.prototype.clearForegroundservice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidSettings.prototype.hasForegroundservice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AndroidInertialSettings inertialSettings = 5;
 * @return {?proto.Messaging.AndroidInertialSettings}
 */
proto.Messaging.AndroidSettings.prototype.getInertialsettings = function() {
  return /** @type{?proto.Messaging.AndroidInertialSettings} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.AndroidInertialSettings, 5));
};


/**
 * @param {?proto.Messaging.AndroidInertialSettings|undefined} value
 * @return {!proto.Messaging.AndroidSettings} returns this
*/
proto.Messaging.AndroidSettings.prototype.setInertialsettings = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.AndroidSettings} returns this
 */
proto.Messaging.AndroidSettings.prototype.clearInertialsettings = function() {
  return this.setInertialsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidSettings.prototype.hasInertialsettings = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.AndroidGeoSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.AndroidGeoSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.AndroidGeoSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidGeoSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    mindistance: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    mintime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    priority: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    batchtime: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.AndroidGeoSettings}
 */
proto.Messaging.AndroidGeoSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.AndroidGeoSettings;
  return proto.Messaging.AndroidGeoSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.AndroidGeoSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.AndroidGeoSettings}
 */
proto.Messaging.AndroidGeoSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMindistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMintime(value);
      break;
    case 3:
      var value = /** @type {!proto.Messaging.AndroidGeoSettings.Priority} */ (reader.readEnum());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.AndroidGeoSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.AndroidGeoSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.AndroidGeoSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidGeoSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {!proto.Messaging.AndroidGeoSettings.Priority} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.AndroidGeoSettings.Priority = {
  HIGH_ACCURACY: 0,
  BALANCED_POWER_ACCURACY: 1,
  LOW_POWER: 2,
  NO_POWER: 3
};

/**
 * optional uint32 minDistance = 1;
 * @return {number}
 */
proto.Messaging.AndroidGeoSettings.prototype.getMindistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.setMindistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.clearMindistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidGeoSettings.prototype.hasMindistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 minTime = 2;
 * @return {number}
 */
proto.Messaging.AndroidGeoSettings.prototype.getMintime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.setMintime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.clearMintime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidGeoSettings.prototype.hasMintime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Priority priority = 3;
 * @return {!proto.Messaging.AndroidGeoSettings.Priority}
 */
proto.Messaging.AndroidGeoSettings.prototype.getPriority = function() {
  return /** @type {!proto.Messaging.AndroidGeoSettings.Priority} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Messaging.AndroidGeoSettings.Priority} value
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.setPriority = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.clearPriority = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidGeoSettings.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 batchTime = 4;
 * @return {number}
 */
proto.Messaging.AndroidGeoSettings.prototype.getBatchtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.setBatchtime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidGeoSettings} returns this
 */
proto.Messaging.AndroidGeoSettings.prototype.clearBatchtime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidGeoSettings.prototype.hasBatchtime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.AndroidBeaconSettings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.AndroidBeaconSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.AndroidBeaconSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.AndroidBeaconSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidBeaconSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    advertisementsList: jspb.Message.toObjectList(msg.getAdvertisementsList(),
    proto.Messaging.BeaconAdvertisement.toObject, includeInstance),
    ranging: (f = msg.getRanging()) && proto.Messaging.BeaconRanging.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.AndroidBeaconSettings}
 */
proto.Messaging.AndroidBeaconSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.AndroidBeaconSettings;
  return proto.Messaging.AndroidBeaconSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.AndroidBeaconSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.AndroidBeaconSettings}
 */
proto.Messaging.AndroidBeaconSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.BeaconAdvertisement;
      reader.readMessage(value,proto.Messaging.BeaconAdvertisement.deserializeBinaryFromReader);
      msg.addAdvertisements(value);
      break;
    case 3:
      var value = new proto.Messaging.BeaconRanging;
      reader.readMessage(value,proto.Messaging.BeaconRanging.deserializeBinaryFromReader);
      msg.setRanging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.AndroidBeaconSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.AndroidBeaconSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.AndroidBeaconSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidBeaconSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdvertisementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Messaging.BeaconAdvertisement.serializeBinaryToWriter
    );
  }
  f = message.getRanging();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Messaging.BeaconRanging.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BeaconAdvertisement advertisements = 1;
 * @return {!Array<!proto.Messaging.BeaconAdvertisement>}
 */
proto.Messaging.AndroidBeaconSettings.prototype.getAdvertisementsList = function() {
  return /** @type{!Array<!proto.Messaging.BeaconAdvertisement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.BeaconAdvertisement, 1));
};


/**
 * @param {!Array<!proto.Messaging.BeaconAdvertisement>} value
 * @return {!proto.Messaging.AndroidBeaconSettings} returns this
*/
proto.Messaging.AndroidBeaconSettings.prototype.setAdvertisementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Messaging.BeaconAdvertisement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.BeaconAdvertisement}
 */
proto.Messaging.AndroidBeaconSettings.prototype.addAdvertisements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Messaging.BeaconAdvertisement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.AndroidBeaconSettings} returns this
 */
proto.Messaging.AndroidBeaconSettings.prototype.clearAdvertisementsList = function() {
  return this.setAdvertisementsList([]);
};


/**
 * optional BeaconRanging ranging = 3;
 * @return {?proto.Messaging.BeaconRanging}
 */
proto.Messaging.AndroidBeaconSettings.prototype.getRanging = function() {
  return /** @type{?proto.Messaging.BeaconRanging} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.BeaconRanging, 3));
};


/**
 * @param {?proto.Messaging.BeaconRanging|undefined} value
 * @return {!proto.Messaging.AndroidBeaconSettings} returns this
*/
proto.Messaging.AndroidBeaconSettings.prototype.setRanging = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.AndroidBeaconSettings} returns this
 */
proto.Messaging.AndroidBeaconSettings.prototype.clearRanging = function() {
  return this.setRanging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidBeaconSettings.prototype.hasRanging = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.AndroidWifiSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.AndroidWifiSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.AndroidWifiSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidWifiSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    interval: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    state: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    rttenabled: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    rttinterval: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.AndroidWifiSettings}
 */
proto.Messaging.AndroidWifiSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.AndroidWifiSettings;
  return proto.Messaging.AndroidWifiSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.AndroidWifiSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.AndroidWifiSettings}
 */
proto.Messaging.AndroidWifiSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInterval(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRttenabled(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRttinterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.AndroidWifiSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.AndroidWifiSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.AndroidWifiSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidWifiSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.Messaging.AndroidWifiSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidWifiSettings.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 interval = 2;
 * @return {number}
 */
proto.Messaging.AndroidWifiSettings.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.setInterval = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.clearInterval = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidWifiSettings.prototype.hasInterval = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.Messaging.AndroidWifiSettings.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.setState = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.clearState = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidWifiSettings.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool rttEnabled = 4;
 * @return {boolean}
 */
proto.Messaging.AndroidWifiSettings.prototype.getRttenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.setRttenabled = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.clearRttenabled = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidWifiSettings.prototype.hasRttenabled = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 rttInterval = 5;
 * @return {number}
 */
proto.Messaging.AndroidWifiSettings.prototype.getRttinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.setRttinterval = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidWifiSettings} returns this
 */
proto.Messaging.AndroidWifiSettings.prototype.clearRttinterval = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidWifiSettings.prototype.hasRttinterval = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.BeaconRegion.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.BeaconRegion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.BeaconRegion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconRegion.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    major: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    minor: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.BeaconRegion}
 */
proto.Messaging.BeaconRegion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.BeaconRegion;
  return proto.Messaging.BeaconRegion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.BeaconRegion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.BeaconRegion}
 */
proto.Messaging.BeaconRegion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.BeaconRegion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.BeaconRegion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.BeaconRegion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconRegion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string UUID = 1;
 * @return {string}
 */
proto.Messaging.BeaconRegion.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.BeaconRegion} returns this
 */
proto.Messaging.BeaconRegion.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRegion} returns this
 */
proto.Messaging.BeaconRegion.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRegion.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 major = 2;
 * @return {number}
 */
proto.Messaging.BeaconRegion.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconRegion} returns this
 */
proto.Messaging.BeaconRegion.prototype.setMajor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRegion} returns this
 */
proto.Messaging.BeaconRegion.prototype.clearMajor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRegion.prototype.hasMajor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 minor = 3;
 * @return {number}
 */
proto.Messaging.BeaconRegion.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconRegion} returns this
 */
proto.Messaging.BeaconRegion.prototype.setMinor = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRegion} returns this
 */
proto.Messaging.BeaconRegion.prototype.clearMinor = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRegion.prototype.hasMinor = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.BeaconAdvertisement.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.BeaconAdvertisement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.BeaconAdvertisement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconAdvertisement.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: (f = msg.getIdentifier()) && proto.Messaging.BeaconRegion.toObject(includeInstance, f),
    frequency: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    power: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    onperiod: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    offperiod: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    starttime: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    repeat: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    eid: (f = msg.getEid()) && proto.Messaging.EID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.BeaconAdvertisement}
 */
proto.Messaging.BeaconAdvertisement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.BeaconAdvertisement;
  return proto.Messaging.BeaconAdvertisement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.BeaconAdvertisement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.BeaconAdvertisement}
 */
proto.Messaging.BeaconAdvertisement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.BeaconRegion;
      reader.readMessage(value,proto.Messaging.BeaconRegion.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {!proto.Messaging.BeaconAdvertisement.Frequency} */ (reader.readEnum());
      msg.setFrequency(value);
      break;
    case 3:
      var value = /** @type {!proto.Messaging.BeaconAdvertisement.Power} */ (reader.readEnum());
      msg.setPower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOnperiod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffperiod(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRepeat(value);
      break;
    case 8:
      var value = new proto.Messaging.EID;
      reader.readMessage(value,proto.Messaging.EID.deserializeBinaryFromReader);
      msg.setEid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.BeaconAdvertisement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.BeaconAdvertisement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.BeaconAdvertisement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconAdvertisement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Messaging.BeaconRegion.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Messaging.BeaconAdvertisement.Frequency} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.Messaging.BeaconAdvertisement.Power} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getEid();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Messaging.EID.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.BeaconAdvertisement.Frequency = {
  LOW_FREQUENCY: 0,
  BALANCED_FREQUENCY: 1,
  HIGH_FREQUENCY: 2
};

/**
 * @enum {number}
 */
proto.Messaging.BeaconAdvertisement.Power = {
  ULTRALOW_POWER: 0,
  LOW_POWER: 1,
  MEDIUM_POWER: 2,
  HIGH_POWER: 3
};

/**
 * optional BeaconRegion identifier = 1;
 * @return {?proto.Messaging.BeaconRegion}
 */
proto.Messaging.BeaconAdvertisement.prototype.getIdentifier = function() {
  return /** @type{?proto.Messaging.BeaconRegion} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.BeaconRegion, 1));
};


/**
 * @param {?proto.Messaging.BeaconRegion|undefined} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
*/
proto.Messaging.BeaconAdvertisement.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Frequency frequency = 2;
 * @return {!proto.Messaging.BeaconAdvertisement.Frequency}
 */
proto.Messaging.BeaconAdvertisement.prototype.getFrequency = function() {
  return /** @type {!proto.Messaging.BeaconAdvertisement.Frequency} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Messaging.BeaconAdvertisement.Frequency} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.setFrequency = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearFrequency = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasFrequency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Power power = 3;
 * @return {!proto.Messaging.BeaconAdvertisement.Power}
 */
proto.Messaging.BeaconAdvertisement.prototype.getPower = function() {
  return /** @type {!proto.Messaging.BeaconAdvertisement.Power} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Messaging.BeaconAdvertisement.Power} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.setPower = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearPower = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasPower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 onPeriod = 4;
 * @return {number}
 */
proto.Messaging.BeaconAdvertisement.prototype.getOnperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.setOnperiod = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearOnperiod = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasOnperiod = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 offPeriod = 5;
 * @return {number}
 */
proto.Messaging.BeaconAdvertisement.prototype.getOffperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.setOffperiod = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearOffperiod = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasOffperiod = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 startTime = 6;
 * @return {number}
 */
proto.Messaging.BeaconAdvertisement.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.setStarttime = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearStarttime = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool repeat = 7;
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.getRepeat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.setRepeat = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearRepeat = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasRepeat = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EID eid = 8;
 * @return {?proto.Messaging.EID}
 */
proto.Messaging.BeaconAdvertisement.prototype.getEid = function() {
  return /** @type{?proto.Messaging.EID} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.EID, 8));
};


/**
 * @param {?proto.Messaging.EID|undefined} value
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
*/
proto.Messaging.BeaconAdvertisement.prototype.setEid = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.BeaconAdvertisement} returns this
 */
proto.Messaging.BeaconAdvertisement.prototype.clearEid = function() {
  return this.setEid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconAdvertisement.prototype.hasEid = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.EID.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.EID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.EID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.EID.toObject = function(includeInstance, msg) {
  var f, obj = {
    secret: msg.getSecret_asB64(),
    k: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    clockoffset: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.EID}
 */
proto.Messaging.EID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.EID;
  return proto.Messaging.EID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.EID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.EID}
 */
proto.Messaging.EID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecret(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setK(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClockoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.EID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.EID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.EID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.EID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes secret = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.EID.prototype.getSecret = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes secret = 1;
 * This is a type-conversion wrapper around `getSecret()`
 * @return {string}
 */
proto.Messaging.EID.prototype.getSecret_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecret()));
};


/**
 * optional bytes secret = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecret()`
 * @return {!Uint8Array}
 */
proto.Messaging.EID.prototype.getSecret_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecret()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.EID} returns this
 */
proto.Messaging.EID.prototype.setSecret = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EID} returns this
 */
proto.Messaging.EID.prototype.clearSecret = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EID.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 k = 2;
 * @return {number}
 */
proto.Messaging.EID.prototype.getK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.EID} returns this
 */
proto.Messaging.EID.prototype.setK = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EID} returns this
 */
proto.Messaging.EID.prototype.clearK = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EID.prototype.hasK = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 clockOffset = 3;
 * @return {number}
 */
proto.Messaging.EID.prototype.getClockoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.EID} returns this
 */
proto.Messaging.EID.prototype.setClockoffset = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EID} returns this
 */
proto.Messaging.EID.prototype.clearClockoffset = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EID.prototype.hasClockoffset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.BeaconMonitoring.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.BeaconMonitoring.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.BeaconMonitoring.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.BeaconMonitoring} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconMonitoring.toObject = function(includeInstance, msg) {
  var f, obj = {
    regionsList: jspb.Message.toObjectList(msg.getRegionsList(),
    proto.Messaging.BeaconRegion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.BeaconMonitoring}
 */
proto.Messaging.BeaconMonitoring.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.BeaconMonitoring;
  return proto.Messaging.BeaconMonitoring.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.BeaconMonitoring} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.BeaconMonitoring}
 */
proto.Messaging.BeaconMonitoring.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.BeaconRegion;
      reader.readMessage(value,proto.Messaging.BeaconRegion.deserializeBinaryFromReader);
      msg.addRegions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.BeaconMonitoring.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.BeaconMonitoring.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.BeaconMonitoring} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconMonitoring.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Messaging.BeaconRegion.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BeaconRegion regions = 1;
 * @return {!Array<!proto.Messaging.BeaconRegion>}
 */
proto.Messaging.BeaconMonitoring.prototype.getRegionsList = function() {
  return /** @type{!Array<!proto.Messaging.BeaconRegion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.BeaconRegion, 1));
};


/**
 * @param {!Array<!proto.Messaging.BeaconRegion>} value
 * @return {!proto.Messaging.BeaconMonitoring} returns this
*/
proto.Messaging.BeaconMonitoring.prototype.setRegionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Messaging.BeaconRegion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.BeaconRegion}
 */
proto.Messaging.BeaconMonitoring.prototype.addRegions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Messaging.BeaconRegion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.BeaconMonitoring} returns this
 */
proto.Messaging.BeaconMonitoring.prototype.clearRegionsList = function() {
  return this.setRegionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.BeaconRanging.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.BeaconRanging.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.BeaconRanging.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.BeaconRanging} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconRanging.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxruntime: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    minofftime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    regionsList: jspb.Message.toObjectList(msg.getRegionsList(),
    proto.Messaging.BeaconRegion.toObject, includeInstance),
    filter: (f = msg.getFilter()) && proto.Messaging.BeaconFilter.toObject(includeInstance, f),
    nonbeaconscan: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    eddystonescan: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    ibeaconscan: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.BeaconRanging}
 */
proto.Messaging.BeaconRanging.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.BeaconRanging;
  return proto.Messaging.BeaconRanging.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.BeaconRanging} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.BeaconRanging}
 */
proto.Messaging.BeaconRanging.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxruntime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinofftime(value);
      break;
    case 3:
      var value = new proto.Messaging.BeaconRegion;
      reader.readMessage(value,proto.Messaging.BeaconRegion.deserializeBinaryFromReader);
      msg.addRegions(value);
      break;
    case 4:
      var value = new proto.Messaging.BeaconFilter;
      reader.readMessage(value,proto.Messaging.BeaconFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNonbeaconscan(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEddystonescan(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIbeaconscan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.BeaconRanging.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.BeaconRanging.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.BeaconRanging} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconRanging.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRegionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Messaging.BeaconRegion.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Messaging.BeaconFilter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional uint64 maxRunTime = 1;
 * @return {number}
 */
proto.Messaging.BeaconRanging.prototype.getMaxruntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.setMaxruntime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.clearMaxruntime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.hasMaxruntime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 minOffTime = 2;
 * @return {number}
 */
proto.Messaging.BeaconRanging.prototype.getMinofftime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.setMinofftime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.clearMinofftime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.hasMinofftime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BeaconRegion regions = 3;
 * @return {!Array<!proto.Messaging.BeaconRegion>}
 */
proto.Messaging.BeaconRanging.prototype.getRegionsList = function() {
  return /** @type{!Array<!proto.Messaging.BeaconRegion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.BeaconRegion, 3));
};


/**
 * @param {!Array<!proto.Messaging.BeaconRegion>} value
 * @return {!proto.Messaging.BeaconRanging} returns this
*/
proto.Messaging.BeaconRanging.prototype.setRegionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Messaging.BeaconRegion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.BeaconRegion}
 */
proto.Messaging.BeaconRanging.prototype.addRegions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Messaging.BeaconRegion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.clearRegionsList = function() {
  return this.setRegionsList([]);
};


/**
 * optional BeaconFilter filter = 4;
 * @return {?proto.Messaging.BeaconFilter}
 */
proto.Messaging.BeaconRanging.prototype.getFilter = function() {
  return /** @type{?proto.Messaging.BeaconFilter} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.BeaconFilter, 4));
};


/**
 * @param {?proto.Messaging.BeaconFilter|undefined} value
 * @return {!proto.Messaging.BeaconRanging} returns this
*/
proto.Messaging.BeaconRanging.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool nonBeaconScan = 5;
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.getNonbeaconscan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.setNonbeaconscan = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.clearNonbeaconscan = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.hasNonbeaconscan = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool eddystoneScan = 6;
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.getEddystonescan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.setEddystonescan = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.clearEddystonescan = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.hasEddystonescan = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool iBeaconScan = 7;
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.getIbeaconscan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.setIbeaconscan = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconRanging} returns this
 */
proto.Messaging.BeaconRanging.prototype.clearIbeaconscan = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconRanging.prototype.hasIbeaconscan = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.BeaconFilter.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.BeaconFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.BeaconFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.BeaconFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    windowsize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    maxobservations: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    excluderegionsList: jspb.Message.toObjectList(msg.getExcluderegionsList(),
    proto.Messaging.BeaconRegion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.BeaconFilter}
 */
proto.Messaging.BeaconFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.BeaconFilter;
  return proto.Messaging.BeaconFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.BeaconFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.BeaconFilter}
 */
proto.Messaging.BeaconFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWindowsize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxobservations(value);
      break;
    case 3:
      var value = new proto.Messaging.BeaconRegion;
      reader.readMessage(value,proto.Messaging.BeaconRegion.deserializeBinaryFromReader);
      msg.addExcluderegions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.BeaconFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.BeaconFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.BeaconFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.BeaconFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getExcluderegionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Messaging.BeaconRegion.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 windowSize = 1;
 * @return {number}
 */
proto.Messaging.BeaconFilter.prototype.getWindowsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconFilter} returns this
 */
proto.Messaging.BeaconFilter.prototype.setWindowsize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconFilter} returns this
 */
proto.Messaging.BeaconFilter.prototype.clearWindowsize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconFilter.prototype.hasWindowsize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 maxObservations = 2;
 * @return {number}
 */
proto.Messaging.BeaconFilter.prototype.getMaxobservations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.BeaconFilter} returns this
 */
proto.Messaging.BeaconFilter.prototype.setMaxobservations = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.BeaconFilter} returns this
 */
proto.Messaging.BeaconFilter.prototype.clearMaxobservations = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.BeaconFilter.prototype.hasMaxobservations = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BeaconRegion excludeRegions = 3;
 * @return {!Array<!proto.Messaging.BeaconRegion>}
 */
proto.Messaging.BeaconFilter.prototype.getExcluderegionsList = function() {
  return /** @type{!Array<!proto.Messaging.BeaconRegion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.BeaconRegion, 3));
};


/**
 * @param {!Array<!proto.Messaging.BeaconRegion>} value
 * @return {!proto.Messaging.BeaconFilter} returns this
*/
proto.Messaging.BeaconFilter.prototype.setExcluderegionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Messaging.BeaconRegion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.BeaconRegion}
 */
proto.Messaging.BeaconFilter.prototype.addExcluderegions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Messaging.BeaconRegion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.BeaconFilter} returns this
 */
proto.Messaging.BeaconFilter.prototype.clearExcluderegionsList = function() {
  return this.setExcluderegionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.AndroidInertialSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.AndroidInertialSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.AndroidInertialSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidInertialSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    frequency: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.AndroidInertialSettings}
 */
proto.Messaging.AndroidInertialSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.AndroidInertialSettings;
  return proto.Messaging.AndroidInertialSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.AndroidInertialSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.AndroidInertialSettings}
 */
proto.Messaging.AndroidInertialSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.Messaging.AndroidInertialSettings.Frequency} */ (reader.readEnum());
      msg.setFrequency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.AndroidInertialSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.AndroidInertialSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.AndroidInertialSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AndroidInertialSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {!proto.Messaging.AndroidInertialSettings.Frequency} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.AndroidInertialSettings.Frequency = {
  FASTEST: 1,
  GAME: 2,
  UI: 3,
  NORMAL: 4
};

/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.Messaging.AndroidInertialSettings.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.AndroidInertialSettings} returns this
 */
proto.Messaging.AndroidInertialSettings.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidInertialSettings} returns this
 */
proto.Messaging.AndroidInertialSettings.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidInertialSettings.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Frequency frequency = 2;
 * @return {!proto.Messaging.AndroidInertialSettings.Frequency}
 */
proto.Messaging.AndroidInertialSettings.prototype.getFrequency = function() {
  return /** @type {!proto.Messaging.AndroidInertialSettings.Frequency} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.Messaging.AndroidInertialSettings.Frequency} value
 * @return {!proto.Messaging.AndroidInertialSettings} returns this
 */
proto.Messaging.AndroidInertialSettings.prototype.setFrequency = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AndroidInertialSettings} returns this
 */
proto.Messaging.AndroidInertialSettings.prototype.clearFrequency = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AndroidInertialSettings.prototype.hasFrequency = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.GlobalSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.GlobalSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.GlobalSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.GlobalSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    radiosilence: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.GlobalSettings}
 */
proto.Messaging.GlobalSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.GlobalSettings;
  return proto.Messaging.GlobalSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.GlobalSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.GlobalSettings}
 */
proto.Messaging.GlobalSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRadiosilence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.GlobalSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.GlobalSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.GlobalSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.GlobalSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.GlobalSettings.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.Messaging.GlobalSettings.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.Messaging.GlobalSettings.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.GlobalSettings} returns this
 */
proto.Messaging.GlobalSettings.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.GlobalSettings} returns this
 */
proto.Messaging.GlobalSettings.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.GlobalSettings.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 radioSilence = 3;
 * @return {number}
 */
proto.Messaging.GlobalSettings.prototype.getRadiosilence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.GlobalSettings} returns this
 */
proto.Messaging.GlobalSettings.prototype.setRadiosilence = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.GlobalSettings} returns this
 */
proto.Messaging.GlobalSettings.prototype.clearRadiosilence = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.GlobalSettings.prototype.hasRadiosilence = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.ClientLocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.ClientLocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.ClientLocationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ClientLocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.ClientLocationRequest}
 */
proto.Messaging.ClientLocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.ClientLocationRequest;
  return proto.Messaging.ClientLocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.ClientLocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.ClientLocationRequest}
 */
proto.Messaging.ClientLocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Messaging.ClientLocationRequest.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.ClientLocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.ClientLocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.ClientLocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ClientLocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Messaging.ClientLocationRequest.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.ClientLocationRequest.Type = {
  SINGLE: 1,
  ONGOING: 2,
  STOP: 3
};

/**
 * optional Type type = 1;
 * @return {!proto.Messaging.ClientLocationRequest.Type}
 */
proto.Messaging.ClientLocationRequest.prototype.getType = function() {
  return /** @type {!proto.Messaging.ClientLocationRequest.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.Messaging.ClientLocationRequest.Type} value
 * @return {!proto.Messaging.ClientLocationRequest} returns this
 */
proto.Messaging.ClientLocationRequest.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientLocationRequest} returns this
 */
proto.Messaging.ClientLocationRequest.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientLocationRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.ClientLocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.ClientLocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.ClientLocationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ClientLocationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    error: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    headingoffset: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.ClientLocationResponse}
 */
proto.Messaging.ClientLocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.ClientLocationResponse;
  return proto.Messaging.ClientLocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.ClientLocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.ClientLocationResponse}
 */
proto.Messaging.ClientLocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setError(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingoffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.ClientLocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.ClientLocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.ClientLocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ClientLocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.Messaging.ClientLocationResponse.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientLocationResponse.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.Messaging.ClientLocationResponse.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientLocationResponse.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double error = 3;
 * @return {number}
 */
proto.Messaging.ClientLocationResponse.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.setError = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.clearError = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientLocationResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double headingOffset = 4;
 * @return {number}
 */
proto.Messaging.ClientLocationResponse.prototype.getHeadingoffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.setHeadingoffset = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.clearHeadingoffset = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientLocationResponse.prototype.hasHeadingoffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.Messaging.ClientLocationResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientLocationResponse} returns this
 */
proto.Messaging.ClientLocationResponse.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientLocationResponse.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.ClientMessage.repeatedFields_ = [1,2,3,4,6,15,17,18,19,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    locationmessageList: jspb.Message.toObjectList(msg.getLocationmessageList(),
    proto.Messaging.LocationMessage.toObject, includeInstance),
    bluetoothmessageList: jspb.Message.toObjectList(msg.getBluetoothmessageList(),
    proto.Messaging.Bluetooth.toObject, includeInstance),
    ibeaconmessageList: jspb.Message.toObjectList(msg.getIbeaconmessageList(),
    proto.Messaging.IBeacon.toObject, includeInstance),
    wifimessageList: jspb.Message.toObjectList(msg.getWifimessageList(),
    proto.Messaging.WifiMessage.toObject, includeInstance),
    marker: (f = msg.getMarker()) && proto.Messaging.MarkerMessage.toObject(includeInstance, f),
    aliasList: jspb.Message.toObjectList(msg.getAliasList(),
    proto.Messaging.AliasMessage.toObject, includeInstance),
    capability: (f = msg.getCapability()) && proto.Messaging.Capability.toObject(includeInstance, f),
    battery: (f = msg.getBattery()) && proto.Messaging.Battery.toObject(includeInstance, f),
    clientkey: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    deviceid: msg.getDeviceid_asB64(),
    receivedtimestamp: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    senttime: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    ioscapability: (f = msg.getIoscapability()) && proto.Messaging.IosCapability.toObject(includeInstance, f),
    messageidentifier: msg.getMessageidentifier_asB64(),
    userinputlocationmessageList: jspb.Message.toObjectList(msg.getUserinputlocationmessageList(),
    proto.Messaging.UserInputLocationMessage.toObject, includeInstance),
    surverymode: (f = jspb.Message.getBooleanField(msg, 16)) == null ? undefined : f,
    wifirttmessageList: jspb.Message.toObjectList(msg.getWifirttmessageList(),
    proto.Messaging.WifiRTTMessage.toObject, includeInstance),
    eddystonemessageList: jspb.Message.toObjectList(msg.getEddystonemessageList(),
    proto.Messaging.EddystoneBeacon.toObject, includeInstance),
    stepList: jspb.Message.toObjectList(msg.getStepList(),
    proto.Messaging.Step.toObject, includeInstance),
    locationrequest: (f = msg.getLocationrequest()) && proto.Messaging.ClientLocationRequest.toObject(includeInstance, f),
    circulargeofenceeventsList: jspb.Message.toObjectList(msg.getCirculargeofenceeventsList(),
    proto.Messaging.CircularGeoFenceEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.ClientMessage}
 */
proto.Messaging.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.ClientMessage;
  return proto.Messaging.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.ClientMessage}
 */
proto.Messaging.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.LocationMessage;
      reader.readMessage(value,proto.Messaging.LocationMessage.deserializeBinaryFromReader);
      msg.addLocationmessage(value);
      break;
    case 2:
      var value = new proto.Messaging.Bluetooth;
      reader.readMessage(value,proto.Messaging.Bluetooth.deserializeBinaryFromReader);
      msg.addBluetoothmessage(value);
      break;
    case 3:
      var value = new proto.Messaging.IBeacon;
      reader.readMessage(value,proto.Messaging.IBeacon.deserializeBinaryFromReader);
      msg.addIbeaconmessage(value);
      break;
    case 4:
      var value = new proto.Messaging.WifiMessage;
      reader.readMessage(value,proto.Messaging.WifiMessage.deserializeBinaryFromReader);
      msg.addWifimessage(value);
      break;
    case 5:
      var value = new proto.Messaging.MarkerMessage;
      reader.readMessage(value,proto.Messaging.MarkerMessage.deserializeBinaryFromReader);
      msg.setMarker(value);
      break;
    case 6:
      var value = new proto.Messaging.AliasMessage;
      reader.readMessage(value,proto.Messaging.AliasMessage.deserializeBinaryFromReader);
      msg.addAlias(value);
      break;
    case 7:
      var value = new proto.Messaging.Capability;
      reader.readMessage(value,proto.Messaging.Capability.deserializeBinaryFromReader);
      msg.setCapability(value);
      break;
    case 8:
      var value = new proto.Messaging.Battery;
      reader.readMessage(value,proto.Messaging.Battery.deserializeBinaryFromReader);
      msg.setBattery(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientkey(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeviceid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReceivedtimestamp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSenttime(value);
      break;
    case 13:
      var value = new proto.Messaging.IosCapability;
      reader.readMessage(value,proto.Messaging.IosCapability.deserializeBinaryFromReader);
      msg.setIoscapability(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageidentifier(value);
      break;
    case 15:
      var value = new proto.Messaging.UserInputLocationMessage;
      reader.readMessage(value,proto.Messaging.UserInputLocationMessage.deserializeBinaryFromReader);
      msg.addUserinputlocationmessage(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSurverymode(value);
      break;
    case 17:
      var value = new proto.Messaging.WifiRTTMessage;
      reader.readMessage(value,proto.Messaging.WifiRTTMessage.deserializeBinaryFromReader);
      msg.addWifirttmessage(value);
      break;
    case 18:
      var value = new proto.Messaging.EddystoneBeacon;
      reader.readMessage(value,proto.Messaging.EddystoneBeacon.deserializeBinaryFromReader);
      msg.addEddystonemessage(value);
      break;
    case 19:
      var value = new proto.Messaging.Step;
      reader.readMessage(value,proto.Messaging.Step.deserializeBinaryFromReader);
      msg.addStep(value);
      break;
    case 20:
      var value = new proto.Messaging.ClientLocationRequest;
      reader.readMessage(value,proto.Messaging.ClientLocationRequest.deserializeBinaryFromReader);
      msg.setLocationrequest(value);
      break;
    case 21:
      var value = new proto.Messaging.CircularGeoFenceEvent;
      reader.readMessage(value,proto.Messaging.CircularGeoFenceEvent.deserializeBinaryFromReader);
      msg.addCirculargeofenceevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocationmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Messaging.LocationMessage.serializeBinaryToWriter
    );
  }
  f = message.getBluetoothmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Messaging.Bluetooth.serializeBinaryToWriter
    );
  }
  f = message.getIbeaconmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Messaging.IBeacon.serializeBinaryToWriter
    );
  }
  f = message.getWifimessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Messaging.WifiMessage.serializeBinaryToWriter
    );
  }
  f = message.getMarker();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Messaging.MarkerMessage.serializeBinaryToWriter
    );
  }
  f = message.getAliasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Messaging.AliasMessage.serializeBinaryToWriter
    );
  }
  f = message.getCapability();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Messaging.Capability.serializeBinaryToWriter
    );
  }
  f = message.getBattery();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Messaging.Battery.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getIoscapability();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Messaging.IosCapability.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getUserinputlocationmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.Messaging.UserInputLocationMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getWifirttmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.Messaging.WifiRTTMessage.serializeBinaryToWriter
    );
  }
  f = message.getEddystonemessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.Messaging.EddystoneBeacon.serializeBinaryToWriter
    );
  }
  f = message.getStepList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.Messaging.Step.serializeBinaryToWriter
    );
  }
  f = message.getLocationrequest();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.Messaging.ClientLocationRequest.serializeBinaryToWriter
    );
  }
  f = message.getCirculargeofenceeventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.Messaging.CircularGeoFenceEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LocationMessage locationMessage = 1;
 * @return {!Array<!proto.Messaging.LocationMessage>}
 */
proto.Messaging.ClientMessage.prototype.getLocationmessageList = function() {
  return /** @type{!Array<!proto.Messaging.LocationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.LocationMessage, 1));
};


/**
 * @param {!Array<!proto.Messaging.LocationMessage>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setLocationmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Messaging.LocationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.LocationMessage}
 */
proto.Messaging.ClientMessage.prototype.addLocationmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Messaging.LocationMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearLocationmessageList = function() {
  return this.setLocationmessageList([]);
};


/**
 * repeated Bluetooth bluetoothMessage = 2;
 * @return {!Array<!proto.Messaging.Bluetooth>}
 */
proto.Messaging.ClientMessage.prototype.getBluetoothmessageList = function() {
  return /** @type{!Array<!proto.Messaging.Bluetooth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.Bluetooth, 2));
};


/**
 * @param {!Array<!proto.Messaging.Bluetooth>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setBluetoothmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Messaging.Bluetooth=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.Bluetooth}
 */
proto.Messaging.ClientMessage.prototype.addBluetoothmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Messaging.Bluetooth, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearBluetoothmessageList = function() {
  return this.setBluetoothmessageList([]);
};


/**
 * repeated IBeacon ibeaconMessage = 3;
 * @return {!Array<!proto.Messaging.IBeacon>}
 */
proto.Messaging.ClientMessage.prototype.getIbeaconmessageList = function() {
  return /** @type{!Array<!proto.Messaging.IBeacon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.IBeacon, 3));
};


/**
 * @param {!Array<!proto.Messaging.IBeacon>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setIbeaconmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Messaging.IBeacon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.IBeacon}
 */
proto.Messaging.ClientMessage.prototype.addIbeaconmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Messaging.IBeacon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearIbeaconmessageList = function() {
  return this.setIbeaconmessageList([]);
};


/**
 * repeated WifiMessage wifiMessage = 4;
 * @return {!Array<!proto.Messaging.WifiMessage>}
 */
proto.Messaging.ClientMessage.prototype.getWifimessageList = function() {
  return /** @type{!Array<!proto.Messaging.WifiMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.WifiMessage, 4));
};


/**
 * @param {!Array<!proto.Messaging.WifiMessage>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setWifimessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Messaging.WifiMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.WifiMessage}
 */
proto.Messaging.ClientMessage.prototype.addWifimessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Messaging.WifiMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearWifimessageList = function() {
  return this.setWifimessageList([]);
};


/**
 * optional MarkerMessage marker = 5;
 * @return {?proto.Messaging.MarkerMessage}
 */
proto.Messaging.ClientMessage.prototype.getMarker = function() {
  return /** @type{?proto.Messaging.MarkerMessage} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.MarkerMessage, 5));
};


/**
 * @param {?proto.Messaging.MarkerMessage|undefined} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setMarker = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearMarker = function() {
  return this.setMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasMarker = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated AliasMessage alias = 6;
 * @return {!Array<!proto.Messaging.AliasMessage>}
 */
proto.Messaging.ClientMessage.prototype.getAliasList = function() {
  return /** @type{!Array<!proto.Messaging.AliasMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.AliasMessage, 6));
};


/**
 * @param {!Array<!proto.Messaging.AliasMessage>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setAliasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Messaging.AliasMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.AliasMessage}
 */
proto.Messaging.ClientMessage.prototype.addAlias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Messaging.AliasMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearAliasList = function() {
  return this.setAliasList([]);
};


/**
 * optional Capability capability = 7;
 * @return {?proto.Messaging.Capability}
 */
proto.Messaging.ClientMessage.prototype.getCapability = function() {
  return /** @type{?proto.Messaging.Capability} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.Capability, 7));
};


/**
 * @param {?proto.Messaging.Capability|undefined} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setCapability = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearCapability = function() {
  return this.setCapability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasCapability = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Battery battery = 8;
 * @return {?proto.Messaging.Battery}
 */
proto.Messaging.ClientMessage.prototype.getBattery = function() {
  return /** @type{?proto.Messaging.Battery} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.Battery, 8));
};


/**
 * @param {?proto.Messaging.Battery|undefined} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setBattery = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearBattery = function() {
  return this.setBattery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasBattery = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string clientKey = 9;
 * @return {string}
 */
proto.Messaging.ClientMessage.prototype.getClientkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.setClientkey = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearClientkey = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasClientkey = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes deviceId = 10;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.ClientMessage.prototype.getDeviceid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes deviceId = 10;
 * This is a type-conversion wrapper around `getDeviceid()`
 * @return {string}
 */
proto.Messaging.ClientMessage.prototype.getDeviceid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeviceid()));
};


/**
 * optional bytes deviceId = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeviceid()`
 * @return {!Uint8Array}
 */
proto.Messaging.ClientMessage.prototype.getDeviceid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeviceid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 receivedTimestamp = 11;
 * @return {number}
 */
proto.Messaging.ClientMessage.prototype.getReceivedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.setReceivedtimestamp = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearReceivedtimestamp = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasReceivedtimestamp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint64 sentTime = 12;
 * @return {number}
 */
proto.Messaging.ClientMessage.prototype.getSenttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.setSenttime = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearSenttime = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasSenttime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional IosCapability iosCapability = 13;
 * @return {?proto.Messaging.IosCapability}
 */
proto.Messaging.ClientMessage.prototype.getIoscapability = function() {
  return /** @type{?proto.Messaging.IosCapability} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.IosCapability, 13));
};


/**
 * @param {?proto.Messaging.IosCapability|undefined} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setIoscapability = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearIoscapability = function() {
  return this.setIoscapability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasIoscapability = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bytes messageIdentifier = 14;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.ClientMessage.prototype.getMessageidentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes messageIdentifier = 14;
 * This is a type-conversion wrapper around `getMessageidentifier()`
 * @return {string}
 */
proto.Messaging.ClientMessage.prototype.getMessageidentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageidentifier()));
};


/**
 * optional bytes messageIdentifier = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageidentifier()`
 * @return {!Uint8Array}
 */
proto.Messaging.ClientMessage.prototype.getMessageidentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageidentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.setMessageidentifier = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearMessageidentifier = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasMessageidentifier = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated UserInputLocationMessage userInputLocationMessage = 15;
 * @return {!Array<!proto.Messaging.UserInputLocationMessage>}
 */
proto.Messaging.ClientMessage.prototype.getUserinputlocationmessageList = function() {
  return /** @type{!Array<!proto.Messaging.UserInputLocationMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.UserInputLocationMessage, 15));
};


/**
 * @param {!Array<!proto.Messaging.UserInputLocationMessage>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setUserinputlocationmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.Messaging.UserInputLocationMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.UserInputLocationMessage}
 */
proto.Messaging.ClientMessage.prototype.addUserinputlocationmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.Messaging.UserInputLocationMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearUserinputlocationmessageList = function() {
  return this.setUserinputlocationmessageList([]);
};


/**
 * optional bool surveryMode = 16;
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.getSurverymode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.setSurverymode = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearSurverymode = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasSurverymode = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated WifiRTTMessage wifiRttMessage = 17;
 * @return {!Array<!proto.Messaging.WifiRTTMessage>}
 */
proto.Messaging.ClientMessage.prototype.getWifirttmessageList = function() {
  return /** @type{!Array<!proto.Messaging.WifiRTTMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.WifiRTTMessage, 17));
};


/**
 * @param {!Array<!proto.Messaging.WifiRTTMessage>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setWifirttmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.Messaging.WifiRTTMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.WifiRTTMessage}
 */
proto.Messaging.ClientMessage.prototype.addWifirttmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.Messaging.WifiRTTMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearWifirttmessageList = function() {
  return this.setWifirttmessageList([]);
};


/**
 * repeated EddystoneBeacon eddystonemessage = 18;
 * @return {!Array<!proto.Messaging.EddystoneBeacon>}
 */
proto.Messaging.ClientMessage.prototype.getEddystonemessageList = function() {
  return /** @type{!Array<!proto.Messaging.EddystoneBeacon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.EddystoneBeacon, 18));
};


/**
 * @param {!Array<!proto.Messaging.EddystoneBeacon>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setEddystonemessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.Messaging.EddystoneBeacon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.EddystoneBeacon}
 */
proto.Messaging.ClientMessage.prototype.addEddystonemessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.Messaging.EddystoneBeacon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearEddystonemessageList = function() {
  return this.setEddystonemessageList([]);
};


/**
 * repeated Step step = 19;
 * @return {!Array<!proto.Messaging.Step>}
 */
proto.Messaging.ClientMessage.prototype.getStepList = function() {
  return /** @type{!Array<!proto.Messaging.Step>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.Step, 19));
};


/**
 * @param {!Array<!proto.Messaging.Step>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setStepList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.Messaging.Step=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.Step}
 */
proto.Messaging.ClientMessage.prototype.addStep = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.Messaging.Step, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearStepList = function() {
  return this.setStepList([]);
};


/**
 * optional ClientLocationRequest locationRequest = 20;
 * @return {?proto.Messaging.ClientLocationRequest}
 */
proto.Messaging.ClientMessage.prototype.getLocationrequest = function() {
  return /** @type{?proto.Messaging.ClientLocationRequest} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.ClientLocationRequest, 20));
};


/**
 * @param {?proto.Messaging.ClientLocationRequest|undefined} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setLocationrequest = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearLocationrequest = function() {
  return this.setLocationrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.ClientMessage.prototype.hasLocationrequest = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated CircularGeoFenceEvent circularGeoFenceEvents = 21;
 * @return {!Array<!proto.Messaging.CircularGeoFenceEvent>}
 */
proto.Messaging.ClientMessage.prototype.getCirculargeofenceeventsList = function() {
  return /** @type{!Array<!proto.Messaging.CircularGeoFenceEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Messaging.CircularGeoFenceEvent, 21));
};


/**
 * @param {!Array<!proto.Messaging.CircularGeoFenceEvent>} value
 * @return {!proto.Messaging.ClientMessage} returns this
*/
proto.Messaging.ClientMessage.prototype.setCirculargeofenceeventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.Messaging.CircularGeoFenceEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Messaging.CircularGeoFenceEvent}
 */
proto.Messaging.ClientMessage.prototype.addCirculargeofenceevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.Messaging.CircularGeoFenceEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.ClientMessage} returns this
 */
proto.Messaging.ClientMessage.prototype.clearCirculargeofenceeventsList = function() {
  return this.setCirculargeofenceeventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.CircularGeoFenceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.CircularGeoFenceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.CircularGeoFenceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    radius: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.CircularGeoFenceEvent}
 */
proto.Messaging.CircularGeoFenceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.CircularGeoFenceEvent;
  return proto.Messaging.CircularGeoFenceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.CircularGeoFenceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.CircularGeoFenceEvent}
 */
proto.Messaging.CircularGeoFenceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 4:
      var value = /** @type {!proto.Messaging.CircularGeoFenceEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.CircularGeoFenceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.CircularGeoFenceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.CircularGeoFenceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {!proto.Messaging.CircularGeoFenceEvent.Type} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.CircularGeoFenceEvent.Type = {
  ENTRY: 1,
  EXIT: 2
};

/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double radius = 3;
 * @return {number}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.setRadius = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.clearRadius = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Type type = 4;
 * @return {!proto.Messaging.CircularGeoFenceEvent.Type}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.getType = function() {
  return /** @type {!proto.Messaging.CircularGeoFenceEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/**
 * @param {!proto.Messaging.CircularGeoFenceEvent.Type} value
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.setType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.CircularGeoFenceEvent} returns this
 */
proto.Messaging.CircularGeoFenceEvent.prototype.clearType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.CircularGeoFenceEvent.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.UserInputLocationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.UserInputLocationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.UserInputLocationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.UserInputLocationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    altitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.UserInputLocationMessage}
 */
proto.Messaging.UserInputLocationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.UserInputLocationMessage;
  return proto.Messaging.UserInputLocationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.UserInputLocationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.UserInputLocationMessage}
 */
proto.Messaging.UserInputLocationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.UserInputLocationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.UserInputLocationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.UserInputLocationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.UserInputLocationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.Messaging.UserInputLocationMessage.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.UserInputLocationMessage.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.Messaging.UserInputLocationMessage.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.UserInputLocationMessage.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double altitude = 3;
 * @return {number}
 */
proto.Messaging.UserInputLocationMessage.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.setAltitude = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.clearAltitude = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.UserInputLocationMessage.prototype.hasAltitude = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double x = 4;
 * @return {number}
 */
proto.Messaging.UserInputLocationMessage.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.setX = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.clearX = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.UserInputLocationMessage.prototype.hasX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double y = 5;
 * @return {number}
 */
proto.Messaging.UserInputLocationMessage.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.setY = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.clearY = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.UserInputLocationMessage.prototype.hasY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double z = 6;
 * @return {number}
 */
proto.Messaging.UserInputLocationMessage.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.clearZ = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.UserInputLocationMessage.prototype.hasZ = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 timestamp = 7;
 * @return {number}
 */
proto.Messaging.UserInputLocationMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.UserInputLocationMessage} returns this
 */
proto.Messaging.UserInputLocationMessage.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.UserInputLocationMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.LocationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.LocationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.LocationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.LocationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    altitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    horizontalaccuracy: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    verticalaccuracy: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    course: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    ismocklocation: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.LocationMessage}
 */
proto.Messaging.LocationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.LocationMessage;
  return proto.Messaging.LocationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.LocationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.LocationMessage}
 */
proto.Messaging.LocationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHorizontalaccuracy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVerticalaccuracy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCourse(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsmocklocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.LocationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.LocationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.LocationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.LocationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double altitude = 5;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setAltitude = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearAltitude = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasAltitude = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double horizontalAccuracy = 3;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getHorizontalaccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setHorizontalaccuracy = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearHorizontalaccuracy = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasHorizontalaccuracy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double verticalAccuracy = 6;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getVerticalaccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setVerticalaccuracy = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearVerticalaccuracy = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasVerticalaccuracy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double course = 7;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getCourse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setCourse = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearCourse = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasCourse = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double speed = 8;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.Messaging.LocationMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isMockLocation = 9;
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.getIsmocklocation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.setIsmocklocation = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.LocationMessage} returns this
 */
proto.Messaging.LocationMessage.prototype.clearIsmocklocation = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.LocationMessage.prototype.hasIsmocklocation = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messaging.Bluetooth.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.Bluetooth.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.Bluetooth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.Bluetooth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Bluetooth.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: msg.getIdentifier_asB64(),
    mac: msg.getMac_asB64(),
    rssi: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    tx: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    averagingwindow: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    amountaveraged: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    scandataList: msg.getScandataList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.Bluetooth}
 */
proto.Messaging.Bluetooth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.Bluetooth;
  return proto.Messaging.Bluetooth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.Bluetooth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.Bluetooth}
 */
proto.Messaging.Bluetooth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIdentifier(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRssi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAveragingwindow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmountaveraged(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addScandata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.Bluetooth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.Bluetooth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.Bluetooth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Bluetooth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getScandataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes identifier = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.Bluetooth.prototype.getIdentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes identifier = 1;
 * This is a type-conversion wrapper around `getIdentifier()`
 * @return {string}
 */
proto.Messaging.Bluetooth.prototype.getIdentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIdentifier()));
};


/**
 * optional bytes identifier = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdentifier()`
 * @return {!Uint8Array}
 */
proto.Messaging.Bluetooth.prototype.getIdentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIdentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setIdentifier = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearIdentifier = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Bluetooth.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes mac = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.Bluetooth.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes mac = 5;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.Messaging.Bluetooth.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.Messaging.Bluetooth.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setMac = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearMac = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Bluetooth.prototype.hasMac = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 rssi = 2;
 * @return {number}
 */
proto.Messaging.Bluetooth.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setRssi = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearRssi = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Bluetooth.prototype.hasRssi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 tx = 3;
 * @return {number}
 */
proto.Messaging.Bluetooth.prototype.getTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setTx = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearTx = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Bluetooth.prototype.hasTx = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.Messaging.Bluetooth.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Bluetooth.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 averagingWindow = 8;
 * @return {number}
 */
proto.Messaging.Bluetooth.prototype.getAveragingwindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setAveragingwindow = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearAveragingwindow = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Bluetooth.prototype.hasAveragingwindow = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 amountAveraged = 6;
 * @return {number}
 */
proto.Messaging.Bluetooth.prototype.getAmountaveraged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setAmountaveraged = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearAmountaveraged = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Bluetooth.prototype.hasAmountaveraged = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated bytes scanData = 7;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.Messaging.Bluetooth.prototype.getScandataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * repeated bytes scanData = 7;
 * This is a type-conversion wrapper around `getScandataList()`
 * @return {!Array<string>}
 */
proto.Messaging.Bluetooth.prototype.getScandataList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getScandataList()));
};


/**
 * repeated bytes scanData = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScandataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Messaging.Bluetooth.prototype.getScandataList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getScandataList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.setScandataList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.addScandata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messaging.Bluetooth} returns this
 */
proto.Messaging.Bluetooth.prototype.clearScandataList = function() {
  return this.setScandataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IBeacon.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IBeacon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IBeacon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IBeacon.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: msg.getUuid_asB64(),
    major: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    minor: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    rssi: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    proximity: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    accuracy: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    averagingwindow: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    amountaveraged: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IBeacon}
 */
proto.Messaging.IBeacon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IBeacon;
  return proto.Messaging.IBeacon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IBeacon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IBeacon}
 */
proto.Messaging.IBeacon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRssi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProximity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccuracy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAveragingwindow(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmountaveraged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IBeacon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IBeacon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IBeacon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IBeacon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional bytes uuid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.IBeacon.prototype.getUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes uuid = 1;
 * This is a type-conversion wrapper around `getUuid()`
 * @return {string}
 */
proto.Messaging.IBeacon.prototype.getUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUuid()));
};


/**
 * optional bytes uuid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUuid()`
 * @return {!Uint8Array}
 */
proto.Messaging.IBeacon.prototype.getUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUuid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 major = 2;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setMajor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearMajor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasMajor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 minor = 3;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setMinor = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearMinor = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasMinor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 rssi = 4;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setRssi = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearRssi = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasRssi = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 proximity = 5;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getProximity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setProximity = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearProximity = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasProximity = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double accuracy = 6;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getAccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setAccuracy = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearAccuracy = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasAccuracy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 timestamp = 7;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 averagingWindow = 8;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getAveragingwindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setAveragingwindow = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearAveragingwindow = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasAveragingwindow = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 amountAveraged = 9;
 * @return {number}
 */
proto.Messaging.IBeacon.prototype.getAmountaveraged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.setAmountaveraged = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IBeacon} returns this
 */
proto.Messaging.IBeacon.prototype.clearAmountaveraged = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IBeacon.prototype.hasAmountaveraged = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.EddystoneBeacon.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.EddystoneBeacon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.EddystoneBeacon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.EddystoneBeacon.toObject = function(includeInstance, msg) {
  var f, obj = {
    eid: msg.getEid_asB64(),
    mac: msg.getMac_asB64(),
    tx: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    rssi: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    averagingwindow: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    amountaveraged: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.EddystoneBeacon}
 */
proto.Messaging.EddystoneBeacon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.EddystoneBeacon;
  return proto.Messaging.EddystoneBeacon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.EddystoneBeacon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.EddystoneBeacon}
 */
proto.Messaging.EddystoneBeacon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRssi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAveragingwindow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmountaveraged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.EddystoneBeacon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.EddystoneBeacon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.EddystoneBeacon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.EddystoneBeacon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional bytes eid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.EddystoneBeacon.prototype.getEid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes eid = 1;
 * This is a type-conversion wrapper around `getEid()`
 * @return {string}
 */
proto.Messaging.EddystoneBeacon.prototype.getEid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEid()));
};


/**
 * optional bytes eid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEid()`
 * @return {!Uint8Array}
 */
proto.Messaging.EddystoneBeacon.prototype.getEid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.setEid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.clearEid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EddystoneBeacon.prototype.hasEid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes mac = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.EddystoneBeacon.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mac = 2;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.Messaging.EddystoneBeacon.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.Messaging.EddystoneBeacon.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.setMac = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.clearMac = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EddystoneBeacon.prototype.hasMac = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 tx = 3;
 * @return {number}
 */
proto.Messaging.EddystoneBeacon.prototype.getTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.setTx = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.clearTx = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EddystoneBeacon.prototype.hasTx = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 rssi = 4;
 * @return {number}
 */
proto.Messaging.EddystoneBeacon.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.setRssi = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.clearRssi = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EddystoneBeacon.prototype.hasRssi = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.Messaging.EddystoneBeacon.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EddystoneBeacon.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 averagingWindow = 6;
 * @return {number}
 */
proto.Messaging.EddystoneBeacon.prototype.getAveragingwindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.setAveragingwindow = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.clearAveragingwindow = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EddystoneBeacon.prototype.hasAveragingwindow = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 amountAveraged = 7;
 * @return {number}
 */
proto.Messaging.EddystoneBeacon.prototype.getAmountaveraged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.setAmountaveraged = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.EddystoneBeacon} returns this
 */
proto.Messaging.EddystoneBeacon.prototype.clearAmountaveraged = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.EddystoneBeacon.prototype.hasAmountaveraged = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.WifiMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.WifiMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.WifiMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.WifiMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    bssid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    ssid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rssi: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    frequency: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    centerfreq0: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    centerfreq1: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    channelwidth: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    rttresponder: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.WifiMessage}
 */
proto.Messaging.WifiMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.WifiMessage;
  return proto.Messaging.WifiMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.WifiMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.WifiMessage}
 */
proto.Messaging.WifiMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBssid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRssi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrequency(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCenterfreq0(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCenterfreq1(value);
      break;
    case 8:
      var value = /** @type {!proto.Messaging.WifiMessage.ChannelWidth} */ (reader.readEnum());
      msg.setChannelwidth(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRttresponder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.WifiMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.WifiMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.WifiMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.WifiMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {!proto.Messaging.WifiMessage.ChannelWidth} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.WifiMessage.ChannelWidth = {
  CHANNEL_WIDTH_160MHZ: 1,
  CHANNEL_WIDTH_20MHZ: 2,
  CHANNEL_WIDTH_40MHZ: 3,
  CHANNEL_WIDTH_80MHZ: 4,
  CHANNEL_WIDTH_80MHZ_PLUS_MHZ: 5
};

/**
 * optional string bssid = 1;
 * @return {string}
 */
proto.Messaging.WifiMessage.prototype.getBssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setBssid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearBssid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasBssid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ssid = 2;
 * @return {string}
 */
proto.Messaging.WifiMessage.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setSsid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearSsid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasSsid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 rssi = 3;
 * @return {number}
 */
proto.Messaging.WifiMessage.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setRssi = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearRssi = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasRssi = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 frequency = 4;
 * @return {number}
 */
proto.Messaging.WifiMessage.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setFrequency = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearFrequency = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasFrequency = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.Messaging.WifiMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 centerFreq0 = 6;
 * @return {number}
 */
proto.Messaging.WifiMessage.prototype.getCenterfreq0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setCenterfreq0 = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearCenterfreq0 = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasCenterfreq0 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 centerFreq1 = 7;
 * @return {number}
 */
proto.Messaging.WifiMessage.prototype.getCenterfreq1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setCenterfreq1 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearCenterfreq1 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasCenterfreq1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ChannelWidth channelWidth = 8;
 * @return {!proto.Messaging.WifiMessage.ChannelWidth}
 */
proto.Messaging.WifiMessage.prototype.getChannelwidth = function() {
  return /** @type {!proto.Messaging.WifiMessage.ChannelWidth} */ (jspb.Message.getFieldWithDefault(this, 8, 1));
};


/**
 * @param {!proto.Messaging.WifiMessage.ChannelWidth} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setChannelwidth = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearChannelwidth = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasChannelwidth = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool rttResponder = 9;
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.getRttresponder = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.setRttresponder = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiMessage} returns this
 */
proto.Messaging.WifiMessage.prototype.clearRttresponder = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiMessage.prototype.hasRttresponder = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.WifiRTTMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.WifiRTTMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.WifiRTTMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.WifiRTTMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesspoint: (f = msg.getAccesspoint()) && proto.Messaging.WifiMessage.toObject(includeInstance, f),
    distance: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    distancestddev: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    attemptedmeasurements: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    successfulmeasurements: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.WifiRTTMessage}
 */
proto.Messaging.WifiRTTMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.WifiRTTMessage;
  return proto.Messaging.WifiRTTMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.WifiRTTMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.WifiRTTMessage}
 */
proto.Messaging.WifiRTTMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Messaging.WifiMessage;
      reader.readMessage(value,proto.Messaging.WifiMessage.deserializeBinaryFromReader);
      msg.setAccesspoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistancestddev(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAttemptedmeasurements(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSuccessfulmeasurements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.WifiRTTMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.WifiRTTMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.WifiRTTMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.WifiRTTMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesspoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Messaging.WifiMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional WifiMessage accessPoint = 1;
 * @return {?proto.Messaging.WifiMessage}
 */
proto.Messaging.WifiRTTMessage.prototype.getAccesspoint = function() {
  return /** @type{?proto.Messaging.WifiMessage} */ (
    jspb.Message.getWrapperField(this, proto.Messaging.WifiMessage, 1));
};


/**
 * @param {?proto.Messaging.WifiMessage|undefined} value
 * @return {!proto.Messaging.WifiRTTMessage} returns this
*/
proto.Messaging.WifiRTTMessage.prototype.setAccesspoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.clearAccesspoint = function() {
  return this.setAccesspoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiRTTMessage.prototype.hasAccesspoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 distance = 2;
 * @return {number}
 */
proto.Messaging.WifiRTTMessage.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiRTTMessage.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 distanceStdDev = 3;
 * @return {number}
 */
proto.Messaging.WifiRTTMessage.prototype.getDistancestddev = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.setDistancestddev = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.clearDistancestddev = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiRTTMessage.prototype.hasDistancestddev = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 attemptedMeasurements = 4;
 * @return {number}
 */
proto.Messaging.WifiRTTMessage.prototype.getAttemptedmeasurements = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.setAttemptedmeasurements = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.clearAttemptedmeasurements = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiRTTMessage.prototype.hasAttemptedmeasurements = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 successfulMeasurements = 5;
 * @return {number}
 */
proto.Messaging.WifiRTTMessage.prototype.getSuccessfulmeasurements = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.setSuccessfulmeasurements = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.WifiRTTMessage} returns this
 */
proto.Messaging.WifiRTTMessage.prototype.clearSuccessfulmeasurements = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.WifiRTTMessage.prototype.hasSuccessfulmeasurements = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.MarkerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.MarkerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.MarkerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.MarkerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    time: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.MarkerMessage}
 */
proto.Messaging.MarkerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.MarkerMessage;
  return proto.Messaging.MarkerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.MarkerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.MarkerMessage}
 */
proto.Messaging.MarkerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.MarkerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.MarkerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.MarkerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.MarkerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.Messaging.MarkerMessage.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.MarkerMessage} returns this
 */
proto.Messaging.MarkerMessage.prototype.setData = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.MarkerMessage} returns this
 */
proto.Messaging.MarkerMessage.prototype.clearData = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.MarkerMessage.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.Messaging.MarkerMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.MarkerMessage} returns this
 */
proto.Messaging.MarkerMessage.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.MarkerMessage} returns this
 */
proto.Messaging.MarkerMessage.prototype.clearTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.MarkerMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.Capability.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.Capability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.Capability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Capability.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasble: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    canadvertise: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    isbton: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    haslocationpermission: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    isgpson: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    foregroundservice: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    expirytime: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    rtt: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.Capability}
 */
proto.Messaging.Capability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.Capability;
  return proto.Messaging.Capability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.Capability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.Capability}
 */
proto.Messaging.Capability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasble(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanadvertise(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbton(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaslocationpermission(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgpson(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForegroundservice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirytime(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRtt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.Capability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.Capability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.Capability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Capability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional bool hasBle = 1;
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.getHasble = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setHasble = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearHasble = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasHasble = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool canAdvertise = 2;
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.getCanadvertise = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setCanadvertise = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearCanadvertise = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasCanadvertise = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isBTOn = 3;
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.getIsbton = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setIsbton = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearIsbton = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasIsbton = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool hasLocationPermission = 4;
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.getHaslocationpermission = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setHaslocationpermission = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearHaslocationpermission = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasHaslocationpermission = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isGPSOn = 5;
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.getIsgpson = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setIsgpson = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearIsgpson = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasIsgpson = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool foregroundService = 6;
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.getForegroundservice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setForegroundservice = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearForegroundservice = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasForegroundservice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 expiryTime = 7;
 * @return {number}
 */
proto.Messaging.Capability.prototype.getExpirytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setExpirytime = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearExpirytime = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasExpirytime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool rtt = 8;
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.getRtt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.setRtt = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Capability} returns this
 */
proto.Messaging.Capability.prototype.clearRtt = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Capability.prototype.hasRtt = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.IosCapability.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.IosCapability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.IosCapability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosCapability.toObject = function(includeInstance, msg) {
  var f, obj = {
    locationservices: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    locationauthstatus: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    bluetoothhardware: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    batterystate: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    lowpowermode: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.IosCapability}
 */
proto.Messaging.IosCapability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.IosCapability;
  return proto.Messaging.IosCapability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.IosCapability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.IosCapability}
 */
proto.Messaging.IosCapability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocationservices(value);
      break;
    case 2:
      var value = /** @type {!proto.Messaging.IosCapability.LocationAuthStatus} */ (reader.readEnum());
      msg.setLocationauthstatus(value);
      break;
    case 3:
      var value = /** @type {!proto.Messaging.IosCapability.BluetoothHardware} */ (reader.readEnum());
      msg.setBluetoothhardware(value);
      break;
    case 4:
      var value = /** @type {!proto.Messaging.IosCapability.BatteryState} */ (reader.readEnum());
      msg.setBatterystate(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLowpowermode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.IosCapability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.IosCapability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.IosCapability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.IosCapability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {!proto.Messaging.IosCapability.LocationAuthStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.Messaging.IosCapability.BluetoothHardware} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.Messaging.IosCapability.BatteryState} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Messaging.IosCapability.LocationAuthStatus = {
  NOT_DETERMINED: 1,
  RESTRICTED: 2,
  DENIED: 3,
  ALWAYS: 4,
  IN_USE: 5
};

/**
 * @enum {number}
 */
proto.Messaging.IosCapability.BluetoothHardware = {
  OFF: 1,
  ON: 2,
  RESETTING: 3,
  UNAUTHORIZED: 4,
  UNKNOWN: 5,
  UNSUPPORTED: 6
};

/**
 * @enum {number}
 */
proto.Messaging.IosCapability.BatteryState = {
  NOT_DEFINED: 1,
  UNPLUGGED: 2,
  CHARGING: 3,
  FULL: 4
};

/**
 * optional bool locationServices = 1;
 * @return {boolean}
 */
proto.Messaging.IosCapability.prototype.getLocationservices = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.setLocationservices = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.clearLocationservices = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCapability.prototype.hasLocationservices = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LocationAuthStatus locationAuthStatus = 2;
 * @return {!proto.Messaging.IosCapability.LocationAuthStatus}
 */
proto.Messaging.IosCapability.prototype.getLocationauthstatus = function() {
  return /** @type {!proto.Messaging.IosCapability.LocationAuthStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.Messaging.IosCapability.LocationAuthStatus} value
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.setLocationauthstatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.clearLocationauthstatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCapability.prototype.hasLocationauthstatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BluetoothHardware bluetoothHardware = 3;
 * @return {!proto.Messaging.IosCapability.BluetoothHardware}
 */
proto.Messaging.IosCapability.prototype.getBluetoothhardware = function() {
  return /** @type {!proto.Messaging.IosCapability.BluetoothHardware} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.Messaging.IosCapability.BluetoothHardware} value
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.setBluetoothhardware = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.clearBluetoothhardware = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCapability.prototype.hasBluetoothhardware = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BatteryState batteryState = 4;
 * @return {!proto.Messaging.IosCapability.BatteryState}
 */
proto.Messaging.IosCapability.prototype.getBatterystate = function() {
  return /** @type {!proto.Messaging.IosCapability.BatteryState} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/**
 * @param {!proto.Messaging.IosCapability.BatteryState} value
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.setBatterystate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.clearBatterystate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCapability.prototype.hasBatterystate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool lowPowerMode = 5;
 * @return {boolean}
 */
proto.Messaging.IosCapability.prototype.getLowpowermode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.setLowpowermode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.IosCapability} returns this
 */
proto.Messaging.IosCapability.prototype.clearLowpowermode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.IosCapability.prototype.hasLowpowermode = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.AliasMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.AliasMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.AliasMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AliasMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.AliasMessage}
 */
proto.Messaging.AliasMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.AliasMessage;
  return proto.Messaging.AliasMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.AliasMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.AliasMessage}
 */
proto.Messaging.AliasMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.AliasMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.AliasMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.AliasMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.AliasMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Messaging.AliasMessage.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.AliasMessage} returns this
 */
proto.Messaging.AliasMessage.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AliasMessage} returns this
 */
proto.Messaging.AliasMessage.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AliasMessage.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.Messaging.AliasMessage.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messaging.AliasMessage} returns this
 */
proto.Messaging.AliasMessage.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.AliasMessage} returns this
 */
proto.Messaging.AliasMessage.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.AliasMessage.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.Battery.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.Battery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.Battery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Battery.toObject = function(includeInstance, msg) {
  var f, obj = {
    battery: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.Battery}
 */
proto.Messaging.Battery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.Battery;
  return proto.Messaging.Battery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.Battery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.Battery}
 */
proto.Messaging.Battery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.Battery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.Battery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.Battery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Battery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 battery = 1;
 * @return {number}
 */
proto.Messaging.Battery.prototype.getBattery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Battery} returns this
 */
proto.Messaging.Battery.prototype.setBattery = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Battery} returns this
 */
proto.Messaging.Battery.prototype.clearBattery = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Battery.prototype.hasBattery = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.Acknowledgement.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.Acknowledgement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.Acknowledgement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Acknowledgement.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageidentifier: msg.getMessageidentifier_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.Acknowledgement}
 */
proto.Messaging.Acknowledgement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.Acknowledgement;
  return proto.Messaging.Acknowledgement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.Acknowledgement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.Acknowledgement}
 */
proto.Messaging.Acknowledgement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageidentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.Acknowledgement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.Acknowledgement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.Acknowledgement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Acknowledgement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes messageIdentifier = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Messaging.Acknowledgement.prototype.getMessageidentifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes messageIdentifier = 1;
 * This is a type-conversion wrapper around `getMessageidentifier()`
 * @return {string}
 */
proto.Messaging.Acknowledgement.prototype.getMessageidentifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageidentifier()));
};


/**
 * optional bytes messageIdentifier = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageidentifier()`
 * @return {!Uint8Array}
 */
proto.Messaging.Acknowledgement.prototype.getMessageidentifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageidentifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Messaging.Acknowledgement} returns this
 */
proto.Messaging.Acknowledgement.prototype.setMessageidentifier = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Acknowledgement} returns this
 */
proto.Messaging.Acknowledgement.prototype.clearMessageidentifier = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Acknowledgement.prototype.hasMessageidentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messaging.Step.prototype.toObject = function(opt_includeInstance) {
  return proto.Messaging.Step.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messaging.Step} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Step.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    angle: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messaging.Step}
 */
proto.Messaging.Step.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messaging.Step;
  return proto.Messaging.Step.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messaging.Step} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messaging.Step}
 */
proto.Messaging.Step.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messaging.Step.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messaging.Step.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messaging.Step} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messaging.Step.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.Messaging.Step.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Step} returns this
 */
proto.Messaging.Step.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Step} returns this
 */
proto.Messaging.Step.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Step.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double angle = 2;
 * @return {number}
 */
proto.Messaging.Step.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Messaging.Step} returns this
 */
proto.Messaging.Step.prototype.setAngle = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Messaging.Step} returns this
 */
proto.Messaging.Step.prototype.clearAngle = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messaging.Step.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.Messaging);
